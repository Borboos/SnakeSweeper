{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cajso\\\\Desktop\\\\Projects\\\\minesweeper\\\\src\\\\Components\\\\MineGrid.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport MineSquare from \"./MineSquare\";\nimport MineGameOver from \"./MineGameOver\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getFlagsLeft(squareList) {\n  return 40 - squareList.filter(s => s.flagged).length;\n}\nfunction getSquare(x, y, list) {\n  return list.filter(s => s.x === x && s.y === y)[0];\n}\nfunction getTime(timer) {\n  const minutes = Math.floor(timer / 60);\n  const minutesStr = minutes < 10 ? `0${minutes}` : `${minutes}`;\n  const seconds = timer % 60;\n  const secondsStr = seconds < 10 ? `0${seconds}` : `${seconds}`;\n  return `${minutesStr}:${secondsStr}`;\n}\nfunction getInitGrid(size) {\n  let initialSquareList = [];\n  for (let i = 0; i < size; i++) {\n    for (let j = 0; j < size; j++) {\n      initialSquareList.push({\n        x: i,\n        y: j,\n        adjacentBombs: 0,\n        flipped: false,\n        flagged: false,\n        bomb: false,\n        hovered: false\n      });\n    }\n  }\n  for (let i = 0; i < 40; i++) {\n    let randX = Math.floor(Math.random() * size);\n    let randY = Math.floor(Math.random() * size);\n    let randSquare = getSquare(randX, randY, initialSquareList);\n    while (randSquare.bomb) {\n      randX = Math.floor(Math.random() * size);\n      randY = Math.floor(Math.random() * size);\n      randSquare = getSquare(randX, randY, initialSquareList);\n    }\n    randSquare.bomb = true;\n  }\n  initialSquareList.forEach(ps => {\n    const adjacentSquares = initialSquareList.filter(ss => Math.abs(ps.x - ss.x) <= 1 && Math.abs(ps.y - ss.y) <= 1 && !(ps.x === ss.x && ps.y === ss.y));\n    adjacentSquares.forEach(ss => {\n      if (ss.bomb) ps.adjacentBombs++;\n    });\n  });\n  return initialSquareList;\n}\nfunction gridRightClickUpdate(gameOver, firstSquareClicked, squareList, x, y) {\n  if (!gameOver && firstSquareClicked) {\n    const clickedSquare = getSquare(x, y, squareList);\n    if (clickedSquare.flagged) {\n      clickedSquare.flagged = false;\n    } else {\n      if (getFlagsLeft(squareList) > 0) {\n        clickedSquare.flagged = true;\n      }\n    }\n  }\n  return squareList;\n}\nfunction getAdjacentSquaresToFlip(squareList, x, y) {\n  let toFlip = [];\n  const pivotSquare = getSquare(x, y, squareList);\n  if (!pivotSquare.bomb) {\n    toFlip.push(pivotSquare);\n    pivotSquare.flipped = true;\n    if (pivotSquare.adjacentBombs === 0) {\n      const adjacentSquares = squareList.filter(s => !s.flipped && Math.abs(pivotSquare.x - s.x) <= 1 && Math.abs(pivotSquare.y - s.y) <= 1 && !(pivotSquare.x === s.x && pivotSquare.y === s.y));\n      adjacentSquares.forEach(s => {\n        toFlip = [...toFlip, ...getAdjacentSquaresToFlip(squareList, s.x, s.y)];\n      });\n    }\n  }\n  return toFlip;\n}\nfunction MineGrid() {\n  _s();\n  const [squareList, setSquareList] = useState(() => getInitGrid(16));\n  const [gameOver, setGameOver] = useState(false);\n  const [gameWon, setGameWon] = useState(false);\n  const [firstSquareClicked, setFirstSquareClicked] = useState(false);\n  const [timer, setTimer] = useState(0);\n  const [finalTime, setFinalTime] = useState(\"\");\n  const flagsLeft = getFlagsLeft(squareList);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTimer(timer + 1);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [timer]);\n  function endGame(gameWon) {\n    if (gameWon) {\n      setGameOver(true);\n      setGameWon(true);\n    } else {\n      setGameOver(true);\n      //const victorySound = new Audio(`./sounds/victory.mp3`);\n      //victorySound.play();\n    }\n    setFinalTime(getTime(timer));\n  }\n  if (gameOver === false && gameWon === false) {\n    if (squareList.filter(s => !s.bomb && !s.flipped).length === 0) {\n      endGame(true);\n    }\n    if (squareList.filter(s => s.bomb && s.flipped).length > 0) {\n      endGame(false);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"MINESWEEPER\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [flagsLeft, \" BOMBS UNMARKED\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Grid\",\n      children: [squareList.map((square, index) => /*#__PURE__*/_jsxDEV(MineSquare, {\n        square: square,\n        leftClick: (x, y) => {\n          if (!gameOver) {\n            let tempList = [...squareList];\n            let clickedSquare = getSquare(x, y, tempList);\n            if (clickedSquare.flagged) {\n              return;\n            }\n            if (!firstSquareClicked) {\n              while (clickedSquare.bomb) {\n                tempList = getInitGrid(16);\n                clickedSquare = getSquare(x, y, tempList);\n              }\n              setFirstSquareClicked(true);\n              setTimer(0);\n            }\n            clickedSquare.flipped = true;\n            if (clickedSquare.bomb) {\n              const bombSound = new Audio(`./sounds/explosion.mp3`);\n              bombSound.play();\n            } else {\n              getAdjacentSquaresToFlip(tempList, x, y).forEach(s => getSquare(s.x, s.y, tempList).flipped = true);\n            }\n            setSquareList([...tempList]);\n          }\n        },\n        rightClick: (x, y) => setSquareList(gridRightClickUpdate(gameOver, firstSquareClicked, squareList, x, y))\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this)), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), firstSquareClicked && !gameOver ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"TIME ELAPSED: \", getTime(timer)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }, this), gameOver ? /*#__PURE__*/_jsxDEV(MineGameOver, {\n      gameWon: gameWon,\n      finalTime: finalTime\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n}\n_s(MineGrid, \"hnkGruEDJcVB4fBPOBJSTYgQurM=\");\n_c = MineGrid;\nexport default MineGrid;\nvar _c;\n$RefreshReg$(_c, \"MineGrid\");","map":{"version":3,"names":["React","useState","useEffect","MineSquare","MineGameOver","jsxDEV","_jsxDEV","getFlagsLeft","squareList","filter","s","flagged","length","getSquare","x","y","list","getTime","timer","minutes","Math","floor","minutesStr","seconds","secondsStr","getInitGrid","size","initialSquareList","i","j","push","adjacentBombs","flipped","bomb","hovered","randX","random","randY","randSquare","forEach","ps","adjacentSquares","ss","abs","gridRightClickUpdate","gameOver","firstSquareClicked","clickedSquare","getAdjacentSquaresToFlip","toFlip","pivotSquare","MineGrid","_s","setSquareList","setGameOver","gameWon","setGameWon","setFirstSquareClicked","setTimer","finalTime","setFinalTime","flagsLeft","interval","setInterval","clearInterval","endGame","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","square","index","leftClick","tempList","bombSound","Audio","play","rightClick","_c","$RefreshReg$"],"sources":["C:/Users/cajso/Desktop/Projects/minesweeper/src/Components/MineGrid.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport MineSquare from \"./MineSquare\";\r\nimport { MineSquareType } from \"../Types\";\r\nimport MineGameOver from \"./MineGameOver\";\r\n\r\nfunction getFlagsLeft(squareList: MineSquareType[]) {\r\n  return 40 - squareList.filter((s) => s.flagged).length;\r\n}\r\n\r\nfunction getSquare(x: number, y: number, list: MineSquareType[]) {\r\n  return list.filter((s) => s.x === x && s.y === y)[0];\r\n}\r\n\r\nfunction getTime(timer: number) {\r\n  const minutes = Math.floor(timer / 60);\r\n  const minutesStr = minutes < 10 ? `0${minutes}` : `${minutes}`;\r\n  const seconds = timer % 60;\r\n  const secondsStr = seconds < 10 ? `0${seconds}` : `${seconds}`;\r\n  return `${minutesStr}:${secondsStr}`;\r\n}\r\n\r\nfunction getInitGrid(size: number) {\r\n  let initialSquareList: MineSquareType[] = [];\r\n  for (let i = 0; i < size; i++) {\r\n    for (let j = 0; j < size; j++) {\r\n      initialSquareList.push({\r\n        x: i,\r\n        y: j,\r\n        adjacentBombs: 0,\r\n        flipped: false,\r\n        flagged: false,\r\n        bomb: false,\r\n        hovered: false,\r\n      });\r\n    }\r\n  }\r\n  for (let i = 0; i < 40; i++) {\r\n    let randX = Math.floor(Math.random() * size);\r\n    let randY = Math.floor(Math.random() * size);\r\n    let randSquare = getSquare(randX, randY, initialSquareList);\r\n    while (randSquare.bomb) {\r\n      randX = Math.floor(Math.random() * size);\r\n      randY = Math.floor(Math.random() * size);\r\n      randSquare = getSquare(randX, randY, initialSquareList);\r\n    }\r\n    randSquare.bomb = true;\r\n  }\r\n  initialSquareList.forEach((ps) => {\r\n    const adjacentSquares = initialSquareList.filter(\r\n      (ss) =>\r\n        Math.abs(ps.x - ss.x) <= 1 &&\r\n        Math.abs(ps.y - ss.y) <= 1 &&\r\n        !(ps.x === ss.x && ps.y === ss.y)\r\n    );\r\n    adjacentSquares.forEach((ss) => {\r\n      if (ss.bomb) ps.adjacentBombs++;\r\n    });\r\n  });\r\n  return initialSquareList;\r\n}\r\n\r\nfunction gridRightClickUpdate(\r\n  gameOver: boolean,\r\n  firstSquareClicked: boolean,\r\n  squareList: MineSquareType[],\r\n  x: number,\r\n  y: number\r\n) {\r\n  if (!gameOver && firstSquareClicked) {\r\n    const clickedSquare = getSquare(x, y, squareList);\r\n    if (clickedSquare.flagged) {\r\n      clickedSquare.flagged = false;\r\n    } else {\r\n      if (getFlagsLeft(squareList) > 0) {\r\n        clickedSquare.flagged = true;\r\n      }\r\n    }\r\n  }\r\n  return squareList;\r\n}\r\n\r\nfunction getAdjacentSquaresToFlip(\r\n  squareList: MineSquareType[],\r\n  x: number,\r\n  y: number\r\n) {\r\n  let toFlip: MineSquareType[] = [];\r\n  const pivotSquare = getSquare(x, y, squareList);\r\n  if (!pivotSquare.bomb) {\r\n    toFlip.push(pivotSquare);\r\n    pivotSquare.flipped = true;\r\n    if (pivotSquare.adjacentBombs === 0) {\r\n      const adjacentSquares = squareList.filter(\r\n        (s) =>\r\n          !s.flipped &&\r\n          Math.abs(pivotSquare.x - s.x) <= 1 &&\r\n          Math.abs(pivotSquare.y - s.y) <= 1 &&\r\n          !(pivotSquare.x === s.x && pivotSquare.y === s.y)\r\n      );\r\n      adjacentSquares.forEach((s) => {\r\n        toFlip = [...toFlip, ...getAdjacentSquaresToFlip(squareList, s.x, s.y)];\r\n      });\r\n    }\r\n  }\r\n  return toFlip;\r\n}\r\n\r\nfunction MineGrid() {\r\n  const [squareList, setSquareList] = useState(() => getInitGrid(16));\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [gameWon, setGameWon] = useState(false);\r\n  const [firstSquareClicked, setFirstSquareClicked] = useState(false);\r\n  const [timer, setTimer] = useState(0);\r\n  const [finalTime, setFinalTime] = useState(\"\");\r\n\r\n  const flagsLeft = getFlagsLeft(squareList);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setTimer(timer + 1);\r\n    }, 1000);\r\n    return () => clearInterval(interval);\r\n  }, [timer]);\r\n\r\n  function endGame(gameWon: boolean) {\r\n    if (gameWon) {\r\n      setGameOver(true);\r\n      setGameWon(true);\r\n    } else {\r\n      setGameOver(true);\r\n      //const victorySound = new Audio(`./sounds/victory.mp3`);\r\n      //victorySound.play();\r\n    }\r\n    setFinalTime(getTime(timer));\r\n  }\r\n\r\n  if (gameOver === false && gameWon === false) {\r\n    if (squareList.filter((s) => !s.bomb && !s.flipped).length === 0) {\r\n      endGame(true);\r\n    }\r\n\r\n    if (squareList.filter((s) => s.bomb && s.flipped).length > 0) {\r\n      endGame(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>MINESWEEPER</h1>\r\n      <h2>{flagsLeft} BOMBS UNMARKED</h2>\r\n      <div className=\"Grid\">\r\n        {squareList.map((square, index) => (\r\n          <MineSquare\r\n            key={index}\r\n            square={square}\r\n            leftClick={(x: number, y: number) => {\r\n              if (!gameOver) {\r\n                let tempList = [...squareList];\r\n                let clickedSquare = getSquare(x, y, tempList);\r\n                if (clickedSquare.flagged) {\r\n                  return;\r\n                }\r\n                if (!firstSquareClicked) {\r\n                  while (clickedSquare.bomb) {\r\n                    tempList = getInitGrid(16);\r\n                    clickedSquare = getSquare(x, y, tempList);\r\n                  }\r\n                  setFirstSquareClicked(true);\r\n                  setTimer(0);\r\n                }\r\n                clickedSquare.flipped = true;\r\n                if (clickedSquare.bomb) {\r\n                  const bombSound = new Audio(`./sounds/explosion.mp3`);\r\n                  bombSound.play();\r\n                } else {\r\n                  getAdjacentSquaresToFlip(tempList, x, y).forEach(\r\n                    (s) => (getSquare(s.x, s.y, tempList).flipped = true)\r\n                  );\r\n                }\r\n                setSquareList([...tempList]);\r\n              }\r\n            }}\r\n            rightClick={(x: number, y: number) =>\r\n              setSquareList(\r\n                gridRightClickUpdate(\r\n                  gameOver,\r\n                  firstSquareClicked,\r\n                  squareList,\r\n                  x,\r\n                  y\r\n                )\r\n              )\r\n            }\r\n          />\r\n        ))}{\" \"}\r\n      </div>\r\n      {firstSquareClicked && !gameOver ? (\r\n        <h2>TIME ELAPSED: {getTime(timer)}</h2>\r\n      ) : (\r\n        <div></div>\r\n      )}\r\n      {gameOver ? (\r\n        <MineGameOver gameWon={gameWon} finalTime={finalTime} />\r\n      ) : (\r\n        <div></div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MineGrid;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}