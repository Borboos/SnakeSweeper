{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cajso\\\\Desktop\\\\Projects\\\\minesweeper\\\\src\\\\Components\\\\SnakeGrid.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Direction } from \"../Types\";\nimport SnakeGameOver from \"./SnakeGameOver\";\nimport SnakeSquare from \"./SnakeSquare\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getSquare(list, x, y) {\n  return list.filter(s => s.x === x && s.y === y)[0];\n}\nfunction updateFruit(list) {\n  let prevFruit = list.filter(s => s.fruit)[0];\n  let prevHead = list.filter(s => s.head)[0];\n  let prevBody = list.filter(s => s.bodyPos > 0);\n  let nextFruit = getSquare(list, Math.floor(Math.random() * 16), Math.floor(Math.random() * 16));\n  while (nextFruit === prevFruit || nextFruit === prevHead || prevBody.includes(nextFruit)) {\n    nextFruit = getSquare(list, Math.floor(Math.random() * 16), Math.floor(Math.random() * 16));\n  }\n  prevFruit.fruit = false;\n  nextFruit.fruit = true;\n  const biteSound = new Audio(`./sounds/bite.mp3`);\n  biteSound.play();\n  return Math.ceil(Math.random() * 3);\n}\nfunction findTail(list) {\n  let tail = {};\n  let maxTail = 0;\n  list.forEach(s => {\n    if (s.bodyPos > maxTail) {\n      tail = s;\n      maxTail = s.bodyPos;\n    }\n  });\n  return tail;\n}\nfunction getNextSquare(tempSquareList, prevHead, tempDirection) {\n  switch (tempDirection) {\n    case Direction.Left:\n      return tempSquareList.filter(s => s.x === prevHead.x && s.y === prevHead.y - 1)[0];\n    case Direction.Right:\n      return tempSquareList.filter(s => s.x === prevHead.x && s.y === prevHead.y + 1)[0];\n    case Direction.Up:\n      return tempSquareList.filter(s => s.x === prevHead.x - 1 && s.y === prevHead.y)[0];\n    case Direction.Down:\n      return tempSquareList.filter(s => s.x === prevHead.x + 1 && s.y === prevHead.y)[0];\n  }\n}\nfunction SnakeGrid() {\n  _s();\n  const [squareList, setSquareList] = useState(() => getInitGrid(16));\n  const [gamePaused, setGamePaused] = useState(true);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [headDirection, setHeadDirection] = useState(Direction.Left);\n  const [tempDirection, setTempDirection] = useState(Direction.Left);\n  const [fruitNum, setFruitNum] = useState(Math.ceil(Math.random() * 3));\n  const [lastTimestamp, setLastTimestamp] = useState(0);\n  const [frameTime, setFrameTime] = React.useState(performance.now());\n  function updateHeadDirection(key) {\n    switch (key) {\n      case \"ArrowLeft\":\n        if (headDirection !== Direction.Right) {\n          setTempDirection(Direction.Left);\n        }\n        break;\n      case \"ArrowRight\":\n        if (headDirection !== Direction.Left) {\n          setTempDirection(Direction.Right);\n        }\n        break;\n      case \"ArrowDown\":\n        if (headDirection !== Direction.Up) {\n          setTempDirection(Direction.Down);\n        }\n        break;\n      case \"ArrowUp\":\n        if (headDirection !== Direction.Down) {\n          setTempDirection(Direction.Up);\n        }\n        break;\n      case \" \":\n        setGamePaused(!gamePaused);\n        break;\n      default:\n        break;\n    }\n  }\n  function gameLoop() {\n    if (!gamePaused && !gameOver) {\n      let tempSquareList = structuredClone(squareList);\n      let prevHead = tempSquareList.filter(s => s.head)[0];\n      let prevBody = tempSquareList.filter(s => s.bodyPos > 0);\n      prevHead.head = false;\n      setHeadDirection(tempDirection);\n      const nextHead = getNextSquare(tempSquareList, prevHead, tempDirection);\n      if (nextHead === undefined || prevBody.includes(nextHead)) {\n        setGameOver(true);\n        const bounceSound = new Audio(`./sounds/bounce.mp3`);\n        bounceSound.play();\n      } else {\n        nextHead.head = true;\n        prevHead.bodyPos = 1;\n        prevBody.forEach(s => s.bodyPos++);\n        if (nextHead.fruit) {\n          setFruitNum(updateFruit(tempSquareList));\n          setScore(score + 1);\n        } else {\n          let tail = findTail(tempSquareList);\n          if (tail) {\n            tail.bodyPos = 0;\n          }\n        }\n        setSquareList(tempSquareList);\n      }\n    }\n  }\n  React.useEffect(() => {\n    let frameId;\n    const frame = time => {\n      setFrameTime(time);\n      frameId = requestAnimationFrame(frame);\n    };\n    requestAnimationFrame(frame);\n    return () => cancelAnimationFrame(frameId);\n  }, []);\n  useEffect(() => {\n    if (frameTime - lastTimestamp >= 75) {\n      setLastTimestamp(frameTime);\n      gameLoop();\n    }\n  }, [frameTime]);\n  function getInitGrid(size) {\n    let initialSquareList = [];\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        initialSquareList.push({\n          x: i,\n          y: j,\n          bodyPos: 0,\n          head: false,\n          fruit: false\n        });\n      }\n    }\n    const head = initialSquareList.filter(s => s.x === 8 && s.y === 8)[0];\n    let firstFruit = getSquare(initialSquareList, Math.floor(Math.random() * 16), Math.floor(Math.random() * 16));\n    while (firstFruit === head) {\n      firstFruit = getSquare(initialSquareList, Math.floor(Math.random() * 16), Math.floor(Math.random() * 16));\n    }\n    head.head = true;\n    firstFruit.fruit = true;\n    return initialSquareList;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"SNAKE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), !gameOver && score > 0 ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"FRUITS EATEN: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 33\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 66\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Grid\",\n      onKeyDown: event => {\n        event.preventDefault();\n        updateHeadDirection(event.key);\n      },\n      tabIndex: 0,\n      children: squareList.map((square, index) => /*#__PURE__*/_jsxDEV(SnakeSquare, {\n        square: square,\n        fruitNum: fruitNum,\n        headDirection: headDirection\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), gameOver ? /*#__PURE__*/_jsxDEV(SnakeGameOver, {\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 19\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 53\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n}\n_s(SnakeGrid, \"wr25S+VkeDT+rDSyPW3aD0Vx5V4=\");\n_c = SnakeGrid;\nexport default SnakeGrid;\nvar _c;\n$RefreshReg$(_c, \"SnakeGrid\");","map":{"version":3,"names":["React","useEffect","useState","Direction","SnakeGameOver","SnakeSquare","jsxDEV","_jsxDEV","getSquare","list","x","y","filter","s","updateFruit","prevFruit","fruit","prevHead","head","prevBody","bodyPos","nextFruit","Math","floor","random","includes","biteSound","Audio","play","ceil","findTail","tail","maxTail","forEach","getNextSquare","tempSquareList","tempDirection","Left","Right","Up","Down","SnakeGrid","_s","squareList","setSquareList","getInitGrid","gamePaused","setGamePaused","gameOver","setGameOver","score","setScore","headDirection","setHeadDirection","setTempDirection","fruitNum","setFruitNum","lastTimestamp","setLastTimestamp","frameTime","setFrameTime","performance","now","updateHeadDirection","key","gameLoop","structuredClone","nextHead","undefined","bounceSound","frameId","frame","time","requestAnimationFrame","cancelAnimationFrame","size","initialSquareList","i","j","push","firstFruit","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onKeyDown","event","preventDefault","tabIndex","map","square","index","_c","$RefreshReg$"],"sources":["C:/Users/cajso/Desktop/Projects/minesweeper/src/Components/SnakeGrid.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Direction, SnakeSquareType } from \"../Types\";\r\nimport SnakeGameOver from \"./SnakeGameOver\";\r\nimport SnakeSquare from \"./SnakeSquare\";\r\n\r\nfunction getSquare(list: SnakeSquareType[], x: number, y: number) {\r\n  return list.filter((s) => s.x === x && s.y === y)[0];\r\n}\r\n\r\nfunction updateFruit(list: SnakeSquareType[]) {\r\n  let prevFruit = list.filter((s) => s.fruit)[0];\r\n  let prevHead = list.filter((s) => s.head)[0];\r\n  let prevBody = list.filter((s) => s.bodyPos > 0);\r\n  let nextFruit = getSquare(list, Math.floor(Math.random() * 16), Math.floor(Math.random() * 16));\r\n  while (nextFruit === prevFruit || nextFruit === prevHead || prevBody.includes(nextFruit)) {\r\n    nextFruit = getSquare(list, Math.floor(Math.random() * 16), Math.floor(Math.random() * 16));\r\n  }\r\n  prevFruit.fruit = false;\r\n  nextFruit.fruit = true;\r\n  const biteSound = new Audio(`./sounds/bite.mp3`);\r\n  biteSound.play();\r\n  return Math.ceil(Math.random() * 3);\r\n}\r\n\r\nfunction findTail(list: SnakeSquareType[]) {\r\n  let tail: SnakeSquareType = {} as SnakeSquareType;\r\n  let maxTail = 0;\r\n  list.forEach((s) => {\r\n    if (s.bodyPos > maxTail) {\r\n      tail = s;\r\n      maxTail = s.bodyPos;\r\n    }\r\n  });\r\n  return tail;\r\n}\r\n\r\nfunction getNextSquare(tempSquareList: SnakeSquareType[], prevHead: SnakeSquareType, tempDirection: Direction) {\r\n  switch (tempDirection) {\r\n    case Direction.Left:\r\n      return tempSquareList.filter((s) => s.x === prevHead.x && s.y === prevHead.y - 1)[0];\r\n    case Direction.Right:\r\n      return tempSquareList.filter((s) => s.x === prevHead.x && s.y === prevHead.y + 1)[0];\r\n    case Direction.Up:\r\n      return tempSquareList.filter((s) => s.x === prevHead.x - 1 && s.y === prevHead.y)[0];\r\n    case Direction.Down:\r\n      return tempSquareList.filter((s) => s.x === prevHead.x + 1 && s.y === prevHead.y)[0];\r\n  }\r\n}\r\n\r\nfunction SnakeGrid() {\r\n  const [squareList, setSquareList] = useState(() => getInitGrid(16));\r\n  const [gamePaused, setGamePaused] = useState(true);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [headDirection, setHeadDirection] = useState<Direction>(Direction.Left);\r\n  const [tempDirection, setTempDirection] = useState<Direction>(Direction.Left);\r\n  const [fruitNum, setFruitNum] = useState(Math.ceil(Math.random() * 3));\r\n  const [lastTimestamp, setLastTimestamp] = useState(0);\r\n  const [frameTime, setFrameTime] = React.useState(performance.now());\r\n\r\n  function updateHeadDirection(key: string) {\r\n    switch (key) {\r\n      case \"ArrowLeft\":\r\n        if (headDirection !== Direction.Right) {\r\n          setTempDirection(Direction.Left);\r\n        }\r\n        break;\r\n      case \"ArrowRight\":\r\n        if (headDirection !== Direction.Left) {\r\n          setTempDirection(Direction.Right);\r\n        }\r\n        break;\r\n      case \"ArrowDown\":\r\n        if (headDirection !== Direction.Up) {\r\n          setTempDirection(Direction.Down);\r\n        }\r\n        break;\r\n      case \"ArrowUp\":\r\n        if (headDirection !== Direction.Down) {\r\n          setTempDirection(Direction.Up);\r\n        }\r\n        break;\r\n      case \" \":\r\n        setGamePaused(!gamePaused);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  function gameLoop() {\r\n    if (!gamePaused && !gameOver) {\r\n      let tempSquareList = structuredClone(squareList);\r\n      let prevHead = tempSquareList.filter((s) => s.head)[0];\r\n      let prevBody = tempSquareList.filter((s) => s.bodyPos > 0);\r\n      prevHead.head = false;\r\n      setHeadDirection(tempDirection);\r\n      const nextHead = getNextSquare(tempSquareList, prevHead, tempDirection);\r\n      if (nextHead === undefined || prevBody.includes(nextHead)) {\r\n        setGameOver(true);\r\n        const bounceSound = new Audio(`./sounds/bounce.mp3`);\r\n        bounceSound.play();\r\n      } else {\r\n        nextHead.head = true;\r\n        prevHead.bodyPos = 1;\r\n        prevBody.forEach((s) => s.bodyPos++);\r\n        if (nextHead.fruit) {\r\n          setFruitNum(updateFruit(tempSquareList));\r\n          setScore(score + 1);\r\n        } else {\r\n          let tail = findTail(tempSquareList);\r\n          if (tail) {\r\n            tail.bodyPos = 0;\r\n          }\r\n        }\r\n        setSquareList(tempSquareList);\r\n      }\r\n    }\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    let frameId: number;\r\n    const frame = (time: number) => {\r\n      setFrameTime(time);\r\n      frameId = requestAnimationFrame(frame);\r\n    };\r\n    requestAnimationFrame(frame);\r\n    return () => cancelAnimationFrame(frameId);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (frameTime - lastTimestamp >= 75) {\r\n      setLastTimestamp(frameTime);\r\n      gameLoop();\r\n    }\r\n  }, [frameTime]);\r\n\r\n  function getInitGrid(size: number) {\r\n    let initialSquareList: SnakeSquareType[] = [];\r\n    for (let i = 0; i < size; i++) {\r\n      for (let j = 0; j < size; j++) {\r\n        initialSquareList.push({\r\n          x: i,\r\n          y: j,\r\n          bodyPos: 0,\r\n          head: false,\r\n          fruit: false,\r\n        });\r\n      }\r\n    }\r\n    const head = initialSquareList.filter((s) => s.x === 8 && s.y === 8)[0];\r\n    let firstFruit = getSquare(initialSquareList, Math.floor(Math.random() * 16), Math.floor(Math.random() * 16));\r\n    while (firstFruit === head) {\r\n      firstFruit = getSquare(initialSquareList, Math.floor(Math.random() * 16), Math.floor(Math.random() * 16));\r\n    }\r\n    head.head = true;\r\n    firstFruit.fruit = true;\r\n    return initialSquareList;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>SNAKE</h1>\r\n      {!gameOver && score > 0 ? <h2>FRUITS EATEN: {score}</h2> : <div></div>}\r\n      <div\r\n        className=\"Grid\"\r\n        onKeyDown={(event) => {\r\n          event.preventDefault();\r\n          updateHeadDirection(event.key);\r\n        }}\r\n        tabIndex={0}\r\n      >\r\n        {squareList.map((square, index) => (\r\n          <SnakeSquare key={index} square={square} fruitNum={fruitNum} headDirection={headDirection} />\r\n        ))}\r\n      </div>\r\n      {gameOver ? <SnakeGameOver score={score} /> : <div></div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SnakeGrid;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}