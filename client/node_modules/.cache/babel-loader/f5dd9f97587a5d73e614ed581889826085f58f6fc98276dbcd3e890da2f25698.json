{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cajso\\\\Desktop\\\\Projects\\\\minesweeper\\\\src\\\\Components\\\\SnakeGrid.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport SnakeSquare from \"./SnakeSquare\";\nimport SnakeGameOver from \"./SnakeGameOver\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SnakeGrid() {\n  _s();\n  const [squareList, setSquareList] = useState(() => getInitGrid(16));\n  const [gamePaused, setGamePaused] = useState(true);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [headDirection, setHeadDirection] = useState(\"left\");\n  const [fruitNum, setFruitNum] = useState(1);\n\n  /*window.addEventListener(\"keydown\", (event) => {\r\n    switch (event.key) {\r\n      case \"ArrowLeft\":\r\n        if (headDirection !== \"right\") {\r\n          setHeadDirection(\"left\");\r\n        }\r\n        break;\r\n      case \"ArrowRight\":\r\n        if (headDirection !== \"left\") {\r\n          setHeadDirection(\"right\");\r\n        }\r\n        break;\r\n      case \"ArrowDown\":\r\n        if (headDirection !== \"up\") {\r\n          setHeadDirection(\"down\");\r\n        }\r\n        break;\r\n      case \"ArrowUp\":\r\n        if (headDirection !== \"down\") {\r\n          setHeadDirection(\"up\");\r\n        }\r\n        break;\r\n      case \" \":\r\n        setGamePaused(!gamePaused);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  });*/\n\n  function updateHeadDirection(event) {\n    switch (event.key) {\n      case \"ArrowLeft\":\n        if (headDirection !== \"right\") {\n          setHeadDirection(\"left\");\n        }\n        break;\n      case \"ArrowRight\":\n        if (headDirection !== \"left\") {\n          setHeadDirection(\"right\");\n        }\n        break;\n      case \"ArrowDown\":\n        if (headDirection !== \"up\") {\n          setHeadDirection(\"down\");\n        }\n        break;\n      case \"ArrowUp\":\n        if (headDirection !== \"down\") {\n          setHeadDirection(\"up\");\n        }\n        break;\n      case \" \":\n        setGamePaused(!gamePaused);\n        break;\n      default:\n        break;\n    }\n  }\n  useEffect(() => {\n    document.addEventListener(\"keydown\", updateHeadDirection);\n    return function () {\n      document.removeEventListener(\"keydown\", updateHeadDirection);\n    };\n  }, []);\n  useEffect(() => {\n    function updateFruit(list) {\n      let prevFruit = list.filter(s => s.fruit)[0];\n      let prevHead = list.filter(s => s.head)[0];\n      let prevBody = list.filter(s => s.bodyPos > 0);\n      let nextFruit = getSquare(list, Math.floor(Math.random() * 16), Math.floor(Math.random() * 16));\n      while (nextFruit === prevFruit || nextFruit === prevHead || prevBody.includes(nextFruit)) {\n        nextFruit = getSquare(list, Math.floor(Math.random() * 16), Math.floor(Math.random() * 16));\n      }\n      prevFruit.fruit = false;\n      nextFruit.fruit = true;\n      setFruitNum(Math.ceil(Math.random() * 3));\n    }\n    function findTail(list) {\n      let tail = {};\n      let maxTail = 0;\n      list.forEach(s => {\n        if (s.bodyPos > maxTail) {\n          tail = s;\n          maxTail = s.bodyPos;\n        }\n      });\n      return tail;\n    }\n    const interval = setInterval(() => {\n      if (!gamePaused && !gameOver) {\n        let tempSquareList = structuredClone(squareList);\n        let prevHead = tempSquareList.filter(s => s.head)[0];\n        let prevBody = tempSquareList.filter(s => s.bodyPos > 0);\n        prevHead.head = false;\n        switch (headDirection) {\n          case \"left\":\n            {\n              const nextHead = tempSquareList.filter(s => s.x === prevHead.x && s.y === prevHead.y - 1)[0];\n              if (prevHead.y === 0 || prevBody.includes(nextHead)) {\n                setGameOver(true);\n              } else {\n                nextHead.head = true;\n                prevHead.bodyPos = 1;\n                prevBody.forEach(s => s.bodyPos++);\n                if (nextHead.fruit) {\n                  updateFruit(tempSquareList);\n                  setScore(score + 1);\n                } else {\n                  let tail = findTail(tempSquareList);\n                  if (tail) {\n                    tail.bodyPos = 0;\n                  }\n                }\n                setSquareList(tempSquareList);\n              }\n              return;\n            }\n          case \"right\":\n            {\n              const nextHead = tempSquareList.filter(s => s.x === prevHead.x && s.y === prevHead.y + 1)[0];\n              if (prevHead.y === Math.sqrt(tempSquareList.length) - 1 || prevBody.includes(nextHead)) {\n                setGameOver(true);\n              } else {\n                nextHead.head = true;\n                prevHead.bodyPos = 1;\n                prevBody.forEach(s => s.bodyPos++);\n                if (nextHead.fruit) {\n                  updateFruit(tempSquareList);\n                  setScore(score + 1);\n                } else {\n                  let tail = findTail(tempSquareList);\n                  if (tail) {\n                    tail.bodyPos = 0;\n                  }\n                }\n                setSquareList(tempSquareList);\n              }\n              return;\n            }\n          case \"up\":\n            {\n              const nextHead = tempSquareList.filter(s => s.x === prevHead.x - 1 && s.y === prevHead.y)[0];\n              if (prevHead.x === 0 || prevBody.includes(nextHead)) {\n                setGameOver(true);\n              } else {\n                nextHead.head = true;\n                prevHead.bodyPos = 1;\n                prevBody.forEach(s => s.bodyPos++);\n                if (nextHead.fruit) {\n                  updateFruit(tempSquareList);\n                  setScore(score + 1);\n                } else {\n                  let tail = findTail(tempSquareList);\n                  if (tail) {\n                    tail.bodyPos = 0;\n                  }\n                }\n                setSquareList(tempSquareList);\n              }\n              return;\n            }\n          case \"down\":\n            const nextHead = tempSquareList.filter(s => s.x === prevHead.x + 1 && s.y === prevHead.y)[0];\n            if (prevHead.x === Math.sqrt(tempSquareList.length) - 1 || prevBody.includes(nextHead)) {\n              setGameOver(true);\n            } else {\n              nextHead.head = true;\n              prevHead.bodyPos = 1;\n              prevBody.forEach(s => s.bodyPos++);\n              if (nextHead.fruit) {\n                updateFruit(tempSquareList);\n                setScore(score + 1);\n              } else {\n                let tail = findTail(tempSquareList);\n                if (tail) {\n                  tail.bodyPos = 0;\n                }\n              }\n              setSquareList(tempSquareList);\n            }\n            return;\n          default:\n            return;\n        }\n      }\n    }, 75);\n    return () => clearInterval(interval);\n  }, [squareList, headDirection, gamePaused, gameOver, score]);\n  function getInitGrid(size) {\n    let initialSquareList = [];\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        initialSquareList.push({\n          x: i,\n          y: j,\n          bodyPos: 0,\n          head: false,\n          fruit: false\n        });\n      }\n    }\n    const head = initialSquareList.filter(s => s.x === 8 && s.y === 8)[0];\n    let firstFruit = getSquare(initialSquareList, Math.floor(Math.random() * 16), Math.floor(Math.random() * 16));\n    while (firstFruit === head) {\n      firstFruit = getSquare(initialSquareList, Math.floor(Math.random() * 16), Math.floor(Math.random() * 16));\n    }\n    head.head = true;\n    firstFruit.fruit = true;\n    return initialSquareList;\n  }\n  function getSquare(list, x, y) {\n    return list.filter(s => s.x === x && s.y === y)[0];\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"SNAKE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this), !gameOver && score > 0 ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"FRUITS EATEN: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 33\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 66\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Grid\",\n      children: squareList.map((square, index) => /*#__PURE__*/_jsxDEV(SnakeSquare, {\n        square: square,\n        fruitNum: fruitNum\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this), gameOver ? /*#__PURE__*/_jsxDEV(SnakeGameOver, {\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 19\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 53\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 267,\n    columnNumber: 5\n  }, this);\n}\n_s(SnakeGrid, \"RkZoN2vDW8i3Pmr4LMQ1DI5Dhqs=\");\n_c = SnakeGrid;\nexport default SnakeGrid;\nvar _c;\n$RefreshReg$(_c, \"SnakeGrid\");","map":{"version":3,"names":["React","useState","useEffect","SnakeSquare","SnakeGameOver","jsxDEV","_jsxDEV","SnakeGrid","_s","squareList","setSquareList","getInitGrid","gamePaused","setGamePaused","gameOver","setGameOver","score","setScore","headDirection","setHeadDirection","fruitNum","setFruitNum","updateHeadDirection","event","key","document","addEventListener","removeEventListener","updateFruit","list","prevFruit","filter","s","fruit","prevHead","head","prevBody","bodyPos","nextFruit","getSquare","Math","floor","random","includes","ceil","findTail","tail","maxTail","forEach","interval","setInterval","tempSquareList","structuredClone","nextHead","x","y","sqrt","length","clearInterval","size","initialSquareList","i","j","push","firstFruit","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","square","index","_c","$RefreshReg$"],"sources":["C:/Users/cajso/Desktop/Projects/minesweeper/src/Components/SnakeGrid.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport SnakeSquare from \"./SnakeSquare\";\r\nimport { SnakeSquareType } from \"../Types\";\r\nimport SnakeGameOver from \"./SnakeGameOver\";\r\n\r\nfunction SnakeGrid() {\r\n  const [squareList, setSquareList] = useState(() => getInitGrid(16));\r\n  const [gamePaused, setGamePaused] = useState(true);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [headDirection, setHeadDirection] = useState(\"left\");\r\n  const [fruitNum, setFruitNum] = useState(1);\r\n\r\n  /*window.addEventListener(\"keydown\", (event) => {\r\n    switch (event.key) {\r\n      case \"ArrowLeft\":\r\n        if (headDirection !== \"right\") {\r\n          setHeadDirection(\"left\");\r\n        }\r\n        break;\r\n      case \"ArrowRight\":\r\n        if (headDirection !== \"left\") {\r\n          setHeadDirection(\"right\");\r\n        }\r\n        break;\r\n      case \"ArrowDown\":\r\n        if (headDirection !== \"up\") {\r\n          setHeadDirection(\"down\");\r\n        }\r\n        break;\r\n      case \"ArrowUp\":\r\n        if (headDirection !== \"down\") {\r\n          setHeadDirection(\"up\");\r\n        }\r\n        break;\r\n      case \" \":\r\n        setGamePaused(!gamePaused);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  });*/\r\n\r\n  function updateHeadDirection(event: KeyboardEvent) {\r\n    switch (event.key) {\r\n      case \"ArrowLeft\":\r\n        if (headDirection !== \"right\") {\r\n          setHeadDirection(\"left\");\r\n        }\r\n        break;\r\n      case \"ArrowRight\":\r\n        if (headDirection !== \"left\") {\r\n          setHeadDirection(\"right\");\r\n        }\r\n        break;\r\n      case \"ArrowDown\":\r\n        if (headDirection !== \"up\") {\r\n          setHeadDirection(\"down\");\r\n        }\r\n        break;\r\n      case \"ArrowUp\":\r\n        if (headDirection !== \"down\") {\r\n          setHeadDirection(\"up\");\r\n        }\r\n        break;\r\n      case \" \":\r\n        setGamePaused(!gamePaused);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"keydown\", updateHeadDirection);\r\n    return function () {\r\n      document.removeEventListener(\"keydown\", updateHeadDirection);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    function updateFruit(list: SnakeSquareType[]) {\r\n      let prevFruit = list.filter((s) => s.fruit)[0];\r\n      let prevHead = list.filter((s) => s.head)[0];\r\n      let prevBody = list.filter((s) => s.bodyPos > 0);\r\n      let nextFruit = getSquare(\r\n        list,\r\n        Math.floor(Math.random() * 16),\r\n        Math.floor(Math.random() * 16)\r\n      );\r\n      while (\r\n        nextFruit === prevFruit ||\r\n        nextFruit === prevHead ||\r\n        prevBody.includes(nextFruit)\r\n      ) {\r\n        nextFruit = getSquare(\r\n          list,\r\n          Math.floor(Math.random() * 16),\r\n          Math.floor(Math.random() * 16)\r\n        );\r\n      }\r\n      prevFruit.fruit = false;\r\n      nextFruit.fruit = true;\r\n      setFruitNum(Math.ceil(Math.random() * 3));\r\n    }\r\n\r\n    function findTail(list: SnakeSquareType[]) {\r\n      let tail: SnakeSquareType = {} as SnakeSquareType;\r\n      let maxTail = 0;\r\n      list.forEach((s) => {\r\n        if (s.bodyPos > maxTail) {\r\n          tail = s;\r\n          maxTail = s.bodyPos;\r\n        }\r\n      });\r\n      return tail;\r\n    }\r\n\r\n    const interval = setInterval(() => {\r\n      if (!gamePaused && !gameOver) {\r\n        let tempSquareList = structuredClone(squareList);\r\n        let prevHead = tempSquareList.filter((s) => s.head)[0];\r\n        let prevBody = tempSquareList.filter((s) => s.bodyPos > 0);\r\n        prevHead.head = false;\r\n        switch (headDirection) {\r\n          case \"left\": {\r\n            const nextHead = tempSquareList.filter(\r\n              (s) => s.x === prevHead.x && s.y === prevHead.y - 1\r\n            )[0];\r\n            if (prevHead.y === 0 || prevBody.includes(nextHead)) {\r\n              setGameOver(true);\r\n            } else {\r\n              nextHead.head = true;\r\n              prevHead.bodyPos = 1;\r\n              prevBody.forEach((s) => s.bodyPos++);\r\n              if (nextHead.fruit) {\r\n                updateFruit(tempSquareList);\r\n                setScore(score + 1);\r\n              } else {\r\n                let tail = findTail(tempSquareList);\r\n                if (tail) {\r\n                  tail.bodyPos = 0;\r\n                }\r\n              }\r\n              setSquareList(tempSquareList);\r\n            }\r\n            return;\r\n          }\r\n          case \"right\": {\r\n            const nextHead = tempSquareList.filter(\r\n              (s) => s.x === prevHead.x && s.y === prevHead.y + 1\r\n            )[0];\r\n            if (\r\n              prevHead.y === Math.sqrt(tempSquareList.length) - 1 ||\r\n              prevBody.includes(nextHead)\r\n            ) {\r\n              setGameOver(true);\r\n            } else {\r\n              nextHead.head = true;\r\n              prevHead.bodyPos = 1;\r\n              prevBody.forEach((s) => s.bodyPos++);\r\n              if (nextHead.fruit) {\r\n                updateFruit(tempSquareList);\r\n                setScore(score + 1);\r\n              } else {\r\n                let tail = findTail(tempSquareList);\r\n                if (tail) {\r\n                  tail.bodyPos = 0;\r\n                }\r\n              }\r\n              setSquareList(tempSquareList);\r\n            }\r\n            return;\r\n          }\r\n          case \"up\": {\r\n            const nextHead = tempSquareList.filter(\r\n              (s) => s.x === prevHead.x - 1 && s.y === prevHead.y\r\n            )[0];\r\n            if (prevHead.x === 0 || prevBody.includes(nextHead)) {\r\n              setGameOver(true);\r\n            } else {\r\n              nextHead.head = true;\r\n              prevHead.bodyPos = 1;\r\n              prevBody.forEach((s) => s.bodyPos++);\r\n              if (nextHead.fruit) {\r\n                updateFruit(tempSquareList);\r\n                setScore(score + 1);\r\n              } else {\r\n                let tail = findTail(tempSquareList);\r\n                if (tail) {\r\n                  tail.bodyPos = 0;\r\n                }\r\n              }\r\n              setSquareList(tempSquareList);\r\n            }\r\n            return;\r\n          }\r\n          case \"down\":\r\n            const nextHead = tempSquareList.filter(\r\n              (s) => s.x === prevHead.x + 1 && s.y === prevHead.y\r\n            )[0];\r\n            if (\r\n              prevHead.x === Math.sqrt(tempSquareList.length) - 1 ||\r\n              prevBody.includes(nextHead)\r\n            ) {\r\n              setGameOver(true);\r\n            } else {\r\n              nextHead.head = true;\r\n              prevHead.bodyPos = 1;\r\n              prevBody.forEach((s) => s.bodyPos++);\r\n              if (nextHead.fruit) {\r\n                updateFruit(tempSquareList);\r\n                setScore(score + 1);\r\n              } else {\r\n                let tail = findTail(tempSquareList);\r\n                if (tail) {\r\n                  tail.bodyPos = 0;\r\n                }\r\n              }\r\n              setSquareList(tempSquareList);\r\n            }\r\n            return;\r\n          default:\r\n            return;\r\n        }\r\n      }\r\n    }, 75);\r\n    return () => clearInterval(interval);\r\n  }, [squareList, headDirection, gamePaused, gameOver, score]);\r\n\r\n  function getInitGrid(size: number) {\r\n    let initialSquareList: SnakeSquareType[] = [];\r\n    for (let i = 0; i < size; i++) {\r\n      for (let j = 0; j < size; j++) {\r\n        initialSquareList.push({\r\n          x: i,\r\n          y: j,\r\n          bodyPos: 0,\r\n          head: false,\r\n          fruit: false,\r\n        });\r\n      }\r\n    }\r\n    const head = initialSquareList.filter((s) => s.x === 8 && s.y === 8)[0];\r\n    let firstFruit = getSquare(\r\n      initialSquareList,\r\n      Math.floor(Math.random() * 16),\r\n      Math.floor(Math.random() * 16)\r\n    );\r\n    while (firstFruit === head) {\r\n      firstFruit = getSquare(\r\n        initialSquareList,\r\n        Math.floor(Math.random() * 16),\r\n        Math.floor(Math.random() * 16)\r\n      );\r\n    }\r\n    head.head = true;\r\n    firstFruit.fruit = true;\r\n    return initialSquareList;\r\n  }\r\n\r\n  function getSquare(list: SnakeSquareType[], x: number, y: number) {\r\n    return list.filter((s) => s.x === x && s.y === y)[0];\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>SNAKE</h1>\r\n      {!gameOver && score > 0 ? <h2>FRUITS EATEN: {score}</h2> : <div></div>}\r\n      <div className=\"Grid\">\r\n        {squareList.map((square, index) => (\r\n          <SnakeSquare key={index} square={square} fruitNum={fruitNum} />\r\n        ))}\r\n      </div>\r\n      {gameOver ? <SnakeGameOver score={score} /> : <div></div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SnakeGrid;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}