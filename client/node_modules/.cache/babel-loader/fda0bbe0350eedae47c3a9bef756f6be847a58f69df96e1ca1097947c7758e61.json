{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cajso\\\\Desktop\\\\Projects\\\\minesweeper\\\\src\\\\Components\\\\SnakeGrid.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport SnakeSquare from \"./SnakeSquare\";\nimport SnakeGameOver from \"./SnakeGameOver\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SnakeGrid() {\n  _s();\n  const [squareList, setSquareList] = useState(() => getInitGrid(16));\n  const [gamePaused, setGamePaused] = useState(true);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [headDirection, setHeadDirection] = useState(\"left\");\n  window.addEventListener(\"keydown\", event => {\n    switch (event.key) {\n      case \"ArrowLeft\":\n        if (headDirection !== \"right\") {\n          setHeadDirection(\"left\");\n        }\n        break;\n      case \"ArrowRight\":\n        if (headDirection !== \"left\") {\n          console.log(headDirection);\n          setHeadDirection(\"right\");\n        }\n        break;\n      case \"ArrowDown\":\n        if (headDirection !== \"up\") {\n          setHeadDirection(\"down\");\n        }\n        break;\n      case \"ArrowUp\":\n        if (headDirection !== \"down\") {\n          setHeadDirection(\"up\");\n        }\n        break;\n      case \" \":\n        setGamePaused(!gamePaused);\n        break;\n      default:\n        break;\n    }\n  });\n  useEffect(() => {\n    function updateFruit(list, x, y) {\n      list.filter(s => s.fruit)[0].fruit = false;\n      let randSquare = getSquare(list, Math.floor(Math.random() * 16), Math.floor(Math.random() * 16));\n      while (randSquare.x === x && randSquare.y === y) {\n        randSquare = getSquare(list, Math.floor(Math.random() * 16), Math.floor(Math.random() * 16));\n      }\n      randSquare.fruit = true;\n    }\n    const interval = setInterval(() => {\n      if (!gamePaused) {\n        let tempSquareList = structuredClone(squareList);\n        let prevHead = tempSquareList.filter(s => s.head)[0];\n        prevHead.head = false;\n        switch (headDirection) {\n          case \"left\":\n            if (prevHead.y === 0) {\n              setGameOver(true);\n            } else {\n              const nextHead = tempSquareList.filter(s => s.x === prevHead.x && s.y === prevHead.y - 1)[0];\n              nextHead.head = true;\n              if (nextHead.fruit) {\n                updateFruit(tempSquareList, nextHead.x, nextHead.y);\n                setScore(score + 1);\n              }\n              setSquareList(tempSquareList);\n            }\n            return;\n          case \"right\":\n            if (prevHead.y === tempSquareList.length - 1) {\n              setGameOver(true);\n            } else {\n              const nextHead = tempSquareList.filter(s => s.x === prevHead.x && s.y === prevHead.y + 1)[0];\n              nextHead.head = true;\n              if (nextHead.fruit) {\n                updateFruit(tempSquareList, nextHead.x, nextHead.y);\n                setScore(score + 1);\n              }\n              setSquareList(tempSquareList);\n            }\n            return;\n          case \"up\":\n            if (prevHead.y === 0) {\n              setGameOver(true);\n            } else {\n              const nextHead = tempSquareList.filter(s => s.x === prevHead.x - 1 && s.y === prevHead.y)[0];\n              nextHead.head = true;\n              if (nextHead.fruit) {\n                updateFruit(tempSquareList, nextHead.x, nextHead.y);\n                setScore(score + 1);\n              }\n              setSquareList(tempSquareList);\n            }\n            return;\n          case \"down\":\n            if (prevHead.y === tempSquareList.length - 1) {\n              setGameOver(true);\n            } else {\n              const nextHead = tempSquareList.filter(s => s.x === prevHead.x + 1 && s.y === prevHead.y)[0];\n              nextHead.head = true;\n              if (nextHead.fruit) {\n                updateFruit(tempSquareList, nextHead.x, nextHead.y);\n                setScore(score + 1);\n              }\n              setSquareList(tempSquareList);\n            }\n            return;\n          default:\n            return;\n        }\n      }\n    }, 100);\n    return () => clearInterval(interval);\n  }, [squareList, headDirection, gamePaused, score]);\n  function getInitGrid(size) {\n    let initialSquareList = [];\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        initialSquareList.push({\n          x: i,\n          y: j,\n          head: false,\n          tail: false,\n          fruit: false\n        });\n      }\n    }\n    const head = initialSquareList.filter(s => s.x === 8 && s.y === 8)[0];\n    let randSquare = getSquare(initialSquareList, Math.floor(Math.random() * 16), Math.floor(Math.random() * 16));\n    while (randSquare.x === head.x && randSquare.y === head.y) {\n      randSquare = getSquare(initialSquareList, Math.floor(Math.random() * 16), Math.floor(Math.random() * 16));\n    }\n    return initialSquareList;\n  }\n  function getSquare(list, x, y) {\n    return list.filter(s => s.x === x && s.y === y)[0];\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"SNAKE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), !gameOver && score > 0 ? /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"FRUITS EATEN: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 35\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 68\n      }, this), squareList.map((square, index) => /*#__PURE__*/_jsxDEV(SnakeSquare, {\n        square: square\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }, this)), gameOver ? /*#__PURE__*/_jsxDEV(SnakeGameOver, {\n        score: score\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 55\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n}\n_s(SnakeGrid, \"XODwGrLWOYVWo8TCIucvpftt9gA=\");\n_c = SnakeGrid;\nexport default SnakeGrid;\nvar _c;\n$RefreshReg$(_c, \"SnakeGrid\");","map":{"version":3,"names":["React","useState","useEffect","SnakeSquare","SnakeGameOver","jsxDEV","_jsxDEV","SnakeGrid","_s","squareList","setSquareList","getInitGrid","gamePaused","setGamePaused","gameOver","setGameOver","score","setScore","headDirection","setHeadDirection","window","addEventListener","event","key","console","log","updateFruit","list","x","y","filter","s","fruit","randSquare","getSquare","Math","floor","random","interval","setInterval","tempSquareList","structuredClone","prevHead","head","nextHead","length","clearInterval","size","initialSquareList","i","j","push","tail","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","square","index","_c","$RefreshReg$"],"sources":["C:/Users/cajso/Desktop/Projects/minesweeper/src/Components/SnakeGrid.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport SnakeSquare from \"./SnakeSquare\";\r\nimport { SnakeSquareType } from \"../Types\";\r\nimport SnakeGameOver from \"./SnakeGameOver\";\r\n\r\nfunction SnakeGrid() {\r\n  const [squareList, setSquareList] = useState(() => getInitGrid(16));\r\n  const [gamePaused, setGamePaused] = useState(true);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [headDirection, setHeadDirection] = useState(\"left\");\r\n\r\n  window.addEventListener(\"keydown\", (event) => {\r\n    switch (event.key) {\r\n      case \"ArrowLeft\":\r\n        if (headDirection !== \"right\") {\r\n          setHeadDirection(\"left\");\r\n        }\r\n        break;\r\n      case \"ArrowRight\":\r\n        if (headDirection !== \"left\") {\r\n          console.log(headDirection);\r\n          setHeadDirection(\"right\");\r\n        }\r\n        break;\r\n      case \"ArrowDown\":\r\n        if (headDirection !== \"up\") {\r\n          setHeadDirection(\"down\");\r\n        }\r\n        break;\r\n      case \"ArrowUp\":\r\n        if (headDirection !== \"down\") {\r\n          setHeadDirection(\"up\");\r\n        }\r\n        break;\r\n      case \" \":\r\n        setGamePaused(!gamePaused);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    function updateFruit(list: SnakeSquareType[], x: number, y: number) {\r\n      list.filter((s) => s.fruit)[0].fruit = false;\r\n      let randSquare = getSquare(\r\n        list,\r\n        Math.floor(Math.random() * 16),\r\n        Math.floor(Math.random() * 16)\r\n      );\r\n      while (randSquare.x === x && randSquare.y === y) {\r\n        randSquare = getSquare(\r\n          list,\r\n          Math.floor(Math.random() * 16),\r\n          Math.floor(Math.random() * 16)\r\n        );\r\n      }\r\n      randSquare.fruit = true;\r\n    }\r\n\r\n    const interval = setInterval(() => {\r\n      if (!gamePaused) {\r\n        let tempSquareList = structuredClone(squareList);\r\n        let prevHead = tempSquareList.filter((s) => s.head)[0];\r\n        prevHead.head = false;\r\n        switch (headDirection) {\r\n          case \"left\":\r\n            if (prevHead.y === 0) {\r\n              setGameOver(true);\r\n            } else {\r\n              const nextHead = tempSquareList.filter(\r\n                (s) => s.x === prevHead.x && s.y === prevHead.y - 1\r\n              )[0];\r\n              nextHead.head = true;\r\n              if (nextHead.fruit) {\r\n                updateFruit(tempSquareList, nextHead.x, nextHead.y);\r\n                setScore(score + 1);\r\n              }\r\n              setSquareList(tempSquareList);\r\n            }\r\n            return;\r\n          case \"right\":\r\n            if (prevHead.y === tempSquareList.length - 1) {\r\n              setGameOver(true);\r\n            } else {\r\n              const nextHead = tempSquareList.filter(\r\n                (s) => s.x === prevHead.x && s.y === prevHead.y + 1\r\n              )[0];\r\n              nextHead.head = true;\r\n              if (nextHead.fruit) {\r\n                updateFruit(tempSquareList, nextHead.x, nextHead.y);\r\n                setScore(score + 1);\r\n              }\r\n              setSquareList(tempSquareList);\r\n            }\r\n            return;\r\n          case \"up\":\r\n            if (prevHead.y === 0) {\r\n              setGameOver(true);\r\n            } else {\r\n              const nextHead = tempSquareList.filter(\r\n                (s) => s.x === prevHead.x - 1 && s.y === prevHead.y\r\n              )[0];\r\n              nextHead.head = true;\r\n              if (nextHead.fruit) {\r\n                updateFruit(tempSquareList, nextHead.x, nextHead.y);\r\n                setScore(score + 1);\r\n              }\r\n              setSquareList(tempSquareList);\r\n            }\r\n            return;\r\n          case \"down\":\r\n            if (prevHead.y === tempSquareList.length - 1) {\r\n              setGameOver(true);\r\n            } else {\r\n              const nextHead = tempSquareList.filter(\r\n                (s) => s.x === prevHead.x + 1 && s.y === prevHead.y\r\n              )[0];\r\n              nextHead.head = true;\r\n              if (nextHead.fruit) {\r\n                updateFruit(tempSquareList, nextHead.x, nextHead.y);\r\n                setScore(score + 1);\r\n              }\r\n              setSquareList(tempSquareList);\r\n            }\r\n            return;\r\n          default:\r\n            return;\r\n        }\r\n      }\r\n    }, 100);\r\n    return () => clearInterval(interval);\r\n  }, [squareList, headDirection, gamePaused, score]);\r\n\r\n  function getInitGrid(size: number) {\r\n    let initialSquareList: SnakeSquareType[] = [];\r\n    for (let i = 0; i < size; i++) {\r\n      for (let j = 0; j < size; j++) {\r\n        initialSquareList.push({\r\n          x: i,\r\n          y: j,\r\n          head: false,\r\n          tail: false,\r\n          fruit: false,\r\n        });\r\n      }\r\n    }\r\n    const head = initialSquareList.filter((s) => s.x === 8 && s.y === 8)[0];\r\n    let randSquare = getSquare(\r\n      initialSquareList,\r\n      Math.floor(Math.random() * 16),\r\n      Math.floor(Math.random() * 16)\r\n    );\r\n    while (randSquare.x === head.x && randSquare.y === head.y) {\r\n      randSquare = getSquare(\r\n        initialSquareList,\r\n        Math.floor(Math.random() * 16),\r\n        Math.floor(Math.random() * 16)\r\n      );\r\n    }\r\n    return initialSquareList;\r\n  }\r\n\r\n  function getSquare(list: SnakeSquareType[], x: number, y: number) {\r\n    return list.filter((s) => s.x === x && s.y === y)[0];\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"Grid\">\r\n        <h1>SNAKE</h1>\r\n        {!gameOver && score > 0 ? <h2>FRUITS EATEN: {score}</h2> : <div></div>}\r\n        {squareList.map((square, index) => (\r\n          <SnakeSquare key={index} square={square} />\r\n        ))}\r\n        {gameOver ? <SnakeGameOver score={score} /> : <div></div>}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SnakeGrid;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}