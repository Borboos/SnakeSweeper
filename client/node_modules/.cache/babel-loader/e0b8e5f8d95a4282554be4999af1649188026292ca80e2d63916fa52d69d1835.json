{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cajso\\\\Desktop\\\\Projects\\\\minesweeper\\\\src\\\\Components\\\\MineGrid.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport MineRow from \"./MineRow\";\nimport MineGameOver from \"./MineGameOver\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MineGrid() {\n  _s();\n  const [squareList, setSquareList] = useState(() => getInitGrid(16));\n  const [gameOver, setGameOver] = useState(false);\n  const [gameWon, setGameWon] = useState(false);\n  const [firstSquareClicked, setFirstSquareClicked] = useState(false);\n  const [flagsLeft, setFlagsLeft] = useState(40);\n  const [timer, setTimer] = useState(0);\n  const [finalTime, setFinalTime] = useState(\"\");\n  let checkedAlreadyList = [];\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTimer(timer + 1);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [timer]);\n  function getInitGrid(size) {\n    let initialSquareList = [];\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        initialSquareList.push({\n          xPos: i,\n          yPos: j,\n          adjacentBombs: 0,\n          flipped: false,\n          flagged: false,\n          bomb: false,\n          hovered: false\n        });\n      }\n    }\n    for (let i = 0; i < 40; i++) {\n      let randX = Math.floor(Math.random() * size);\n      let randY = Math.floor(Math.random() * size);\n      let randSquare = getSquare(randX, randY, initialSquareList);\n      while (randSquare.bomb) {\n        randX = Math.floor(Math.random() * size);\n        randY = Math.floor(Math.random() * size);\n        randSquare = getSquare(randX, randY, initialSquareList);\n      }\n      randSquare.bomb = true;\n    }\n    initialSquareList.forEach(ps => {\n      const adjacentSquares = initialSquareList.filter(ss => Math.abs(ps.x - ss.x) <= 1 && Math.abs(ps.y - ss.y) <= 1 && !(ps.x === ss.x && ps.y === ss.y));\n      adjacentSquares.forEach(ss => {\n        if (ss.bomb) ps.adjacentBombs++;\n      });\n    });\n    return initialSquareList;\n  }\n  function flipAdjacentSquares(x, y) {\n    let tempList = [...squareList];\n    let pivotSquare = getSquare(x, y, tempList);\n    if (!pivotSquare.bomb && !checkedAlreadyList.includes({\n      x: pivotSquare.x,\n      y: pivotSquare.y\n    })) {\n      pivotSquare.flipped = true;\n      if (pivotSquare.flagged) {\n        setFlagsLeft(flagsLeft + 1);\n      }\n      setSquareList([...tempList]);\n      tempList = [...squareList];\n      pivotSquare = getSquare(x, y, tempList);\n      if (pivotSquare.adjacentBombs === 0) {\n        const adjacentSquares = tempList.filter(s => Math.abs(pivotSquare.x - s.x) <= 1 && Math.abs(pivotSquare.y - s.y) <= 1 && !(pivotSquare.x === s.x && pivotSquare.y === s.y));\n        adjacentSquares.forEach(s => {\n          checkedAlreadyList.push({\n            x: s.x,\n            y: s.y\n          });\n          flipAdjacentSquares(s.x, s.y);\n        });\n      }\n    }\n  }\n  function gridLeftClickUpdate(x, y) {\n    if (!gameOver) {\n      let tempList = [...squareList];\n      let clickedSquare = getSquare(x, y, tempList);\n      if (clickedSquare.flagged) {\n        return;\n      }\n      if (!firstSquareClicked) {\n        while (clickedSquare.bomb) {\n          tempList = getInitGrid(16);\n          clickedSquare = getSquare(x, y, tempList);\n        }\n        setFirstSquareClicked(true);\n        setTimer(0);\n      }\n      clickedSquare.flipped = true;\n      if (clickedSquare.bomb) {\n        const bombSound = new Audio(`./sounds/explosion.mp3`);\n        bombSound.play();\n        endGame(false);\n      }\n      setSquareList([...tempList]);\n      flipAdjacentSquares(x, y);\n      if (squareList.filter(s => !s.bomb && !s.flipped).length === 0) {\n        endGame(true);\n      }\n    }\n  }\n  function gridRightClickUpdate(x, y) {\n    if (!gameOver && firstSquareClicked) {\n      let tempList = [...squareList];\n      const clickedSquare = getSquare(x, y, tempList);\n      if (clickedSquare.flagged) {\n        clickedSquare.flagged = false;\n        setFlagsLeft(flagsLeft + 1);\n      } else {\n        if (flagsLeft > 0) {\n          clickedSquare.flagged = true;\n          setFlagsLeft(flagsLeft - 1);\n        }\n      }\n      setSquareList([...tempList]);\n    }\n  }\n  function getSquare(x, y, list) {\n    return list.filter(s => s.x === x && s.y === y)[0];\n  }\n  function endGame(gameWon) {\n    if (gameWon) {\n      setGameOver(true);\n      setGameWon(true);\n    } else {\n      setGameOver(true);\n    }\n    setFinalTime(getTime());\n  }\n  function getTime() {\n    const minutes = Math.floor(timer / 60);\n    const minutesStr = minutes < 10 ? `0${minutes}` : `${minutes}`;\n    const seconds = timer % 60;\n    const secondsStr = seconds < 10 ? `0${seconds}` : `${seconds}`;\n    return `${minutesStr}:${secondsStr}`;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Grid\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"MINESWEEPER\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [flagsLeft, \" BOMBS UNMARKED\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), firstSquareClicked && !gameOver ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"TIME ELAPSED: \", getTime()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }, this), squareList.map((row, index) => /*#__PURE__*/_jsxDEV(MineRow, {\n      row: row,\n      leftClick: gridLeftClickUpdate,\n      rightClick: gridRightClickUpdate\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }, this)), gameOver ? /*#__PURE__*/_jsxDEV(MineGameOver, {\n      gameWon: gameWon,\n      finalTime: finalTime\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n}\n_s(MineGrid, \"zc3vMMUJixknrM7dJqf2cj0H6jY=\");\n_c = MineGrid;\nexport default MineGrid;\nvar _c;\n$RefreshReg$(_c, \"MineGrid\");","map":{"version":3,"names":["React","useState","useEffect","MineRow","MineGameOver","jsxDEV","_jsxDEV","MineGrid","_s","squareList","setSquareList","getInitGrid","gameOver","setGameOver","gameWon","setGameWon","firstSquareClicked","setFirstSquareClicked","flagsLeft","setFlagsLeft","timer","setTimer","finalTime","setFinalTime","checkedAlreadyList","interval","setInterval","clearInterval","size","initialSquareList","i","j","push","xPos","yPos","adjacentBombs","flipped","flagged","bomb","hovered","randX","Math","floor","random","randY","randSquare","getSquare","forEach","ps","adjacentSquares","filter","ss","abs","x","y","flipAdjacentSquares","tempList","pivotSquare","includes","s","gridLeftClickUpdate","clickedSquare","bombSound","Audio","play","endGame","length","gridRightClickUpdate","list","getTime","minutes","minutesStr","seconds","secondsStr","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","row","index","leftClick","rightClick","_c","$RefreshReg$"],"sources":["C:/Users/cajso/Desktop/Projects/minesweeper/src/Components/MineGrid.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport MineRow from \"./MineRow\";\r\nimport { MineSquareType } from \"../Types\";\r\nimport MineGameOver from \"./MineGameOver\";\r\n\r\ninterface Coordinates {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nfunction MineGrid() {\r\n  const [squareList, setSquareList] = useState(() => getInitGrid(16));\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [gameWon, setGameWon] = useState(false);\r\n  const [firstSquareClicked, setFirstSquareClicked] = useState(false);\r\n  const [flagsLeft, setFlagsLeft] = useState(40);\r\n  const [timer, setTimer] = useState(0);\r\n  const [finalTime, setFinalTime] = useState(\"\");\r\n  let checkedAlreadyList: Coordinates[] = [];\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setTimer(timer + 1);\r\n    }, 1000);\r\n    return () => clearInterval(interval);\r\n  }, [timer]);\r\n\r\n  function getInitGrid(size: number) {\r\n    let initialSquareList: MineSquareType[] = [];\r\n    for (let i = 0; i < size; i++) {\r\n      for (let j = 0; j < size; j++) {\r\n        initialSquareList.push({\r\n          xPos: i,\r\n          yPos: j,\r\n          adjacentBombs: 0,\r\n          flipped: false,\r\n          flagged: false,\r\n          bomb: false,\r\n          hovered: false,\r\n        });\r\n      }\r\n    }\r\n    for (let i = 0; i < 40; i++) {\r\n      let randX = Math.floor(Math.random() * size);\r\n      let randY = Math.floor(Math.random() * size);\r\n      let randSquare = getSquare(randX, randY, initialSquareList);\r\n      while (randSquare.bomb) {\r\n        randX = Math.floor(Math.random() * size);\r\n        randY = Math.floor(Math.random() * size);\r\n        randSquare = getSquare(randX, randY, initialSquareList);\r\n      }\r\n      randSquare.bomb = true;\r\n    }\r\n    initialSquareList.forEach((ps) => {\r\n      const adjacentSquares = initialSquareList.filter(\r\n        (ss) =>\r\n          Math.abs(ps.x - ss.x) <= 1 &&\r\n          Math.abs(ps.y - ss.y) <= 1 &&\r\n          !(ps.x === ss.x && ps.y === ss.y)\r\n      );\r\n      adjacentSquares.forEach((ss) => {\r\n        if (ss.bomb) ps.adjacentBombs++;\r\n      });\r\n    });\r\n    return initialSquareList;\r\n  }\r\n\r\n  function flipAdjacentSquares(x: number, y: number) {\r\n    let tempList = [...squareList];\r\n    let pivotSquare = getSquare(x, y, tempList);\r\n    if (\r\n      !pivotSquare.bomb &&\r\n      !checkedAlreadyList.includes({ x: pivotSquare.x, y: pivotSquare.y })\r\n    ) {\r\n      pivotSquare.flipped = true;\r\n      if (pivotSquare.flagged) {\r\n        setFlagsLeft(flagsLeft + 1);\r\n      }\r\n      setSquareList([...tempList]);\r\n      tempList = [...squareList];\r\n      pivotSquare = getSquare(x, y, tempList);\r\n      if (pivotSquare.adjacentBombs === 0) {\r\n        const adjacentSquares = tempList.filter(\r\n          (s) =>\r\n            Math.abs(pivotSquare.x - s.x) <= 1 &&\r\n            Math.abs(pivotSquare.y - s.y) <= 1 &&\r\n            !(pivotSquare.x === s.x && pivotSquare.y === s.y)\r\n        );\r\n        adjacentSquares.forEach((s) => {\r\n          checkedAlreadyList.push({ x: s.x, y: s.y });\r\n          flipAdjacentSquares(s.x, s.y);\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  function gridLeftClickUpdate(x: number, y: number) {\r\n    if (!gameOver) {\r\n      let tempList = [...squareList];\r\n      let clickedSquare = getSquare(x, y, tempList);\r\n      if (clickedSquare.flagged) {\r\n        return;\r\n      }\r\n      if (!firstSquareClicked) {\r\n        while (clickedSquare.bomb) {\r\n          tempList = getInitGrid(16);\r\n          clickedSquare = getSquare(x, y, tempList);\r\n        }\r\n        setFirstSquareClicked(true);\r\n        setTimer(0);\r\n      }\r\n      clickedSquare.flipped = true;\r\n      if (clickedSquare.bomb) {\r\n        const bombSound = new Audio(`./sounds/explosion.mp3`);\r\n        bombSound.play();\r\n        endGame(false);\r\n      }\r\n      setSquareList([...tempList]);\r\n      flipAdjacentSquares(x, y);\r\n      if (squareList.filter((s) => !s.bomb && !s.flipped).length === 0) {\r\n        endGame(true);\r\n      }\r\n    }\r\n  }\r\n\r\n  function gridRightClickUpdate(x: number, y: number) {\r\n    if (!gameOver && firstSquareClicked) {\r\n      let tempList = [...squareList];\r\n      const clickedSquare = getSquare(x, y, tempList);\r\n      if (clickedSquare.flagged) {\r\n        clickedSquare.flagged = false;\r\n        setFlagsLeft(flagsLeft + 1);\r\n      } else {\r\n        if (flagsLeft > 0) {\r\n          clickedSquare.flagged = true;\r\n          setFlagsLeft(flagsLeft - 1);\r\n        }\r\n      }\r\n      setSquareList([...tempList]);\r\n    }\r\n  }\r\n\r\n  function getSquare(x: number, y: number, list: MineSquareType[]) {\r\n    return list.filter((s) => s.x === x && s.y === y)[0];\r\n  }\r\n\r\n  function endGame(gameWon: boolean) {\r\n    if (gameWon) {\r\n      setGameOver(true);\r\n      setGameWon(true);\r\n    } else {\r\n      setGameOver(true);\r\n    }\r\n    setFinalTime(getTime());\r\n  }\r\n\r\n  function getTime() {\r\n    const minutes = Math.floor(timer / 60);\r\n    const minutesStr = minutes < 10 ? `0${minutes}` : `${minutes}`;\r\n    const seconds = timer % 60;\r\n    const secondsStr = seconds < 10 ? `0${seconds}` : `${seconds}`;\r\n    return `${minutesStr}:${secondsStr}`;\r\n  }\r\n\r\n  return (\r\n    <div className=\"Grid\">\r\n      <h1>MINESWEEPER</h1>\r\n      <h2>{flagsLeft} BOMBS UNMARKED</h2>\r\n      {firstSquareClicked && !gameOver ? (\r\n        <h2>TIME ELAPSED: {getTime()}</h2>\r\n      ) : (\r\n        <div></div>\r\n      )}\r\n      {squareList.map((row, index) => (\r\n        <MineRow\r\n          key={index}\r\n          row={row}\r\n          leftClick={gridLeftClickUpdate}\r\n          rightClick={gridRightClickUpdate}\r\n        />\r\n      ))}\r\n      {gameOver ? (\r\n        <MineGameOver gameWon={gameWon} finalTime={finalTime} />\r\n      ) : (\r\n        <div></div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MineGrid;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}