{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cajso\\\\Desktop\\\\Projects\\\\minesweeper\\\\src\\\\Components\\\\SnakeGrid.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport SnakeRow from \"./SnakeRow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SnakeGrid() {\n  _s();\n  const [squareList, setSquareList] = useState(() => getInitGrid(16));\n  const [gamePaused, setGamePaused] = useState(true);\n  const [gameOver, setGameOver] = useState(false);\n  const [headDirection, setHeadDirection] = useState(\"left\");\n  window.addEventListener(\"keydown\", event => {\n    switch (event.key) {\n      case \"ArrowLeft\":\n        if (headDirection !== \"right\") {\n          setHeadDirection(\"left\");\n        }\n        break;\n      case \"ArrowRight\":\n        if (headDirection !== \"left\") {\n          setHeadDirection(\"right\");\n        }\n        break;\n      case \"ArrowDown\":\n        if (headDirection !== \"up\") {\n          setHeadDirection(\"down\");\n        }\n        break;\n      case \"ArrowUp\":\n        if (headDirection !== \"down\") {\n          setHeadDirection(\"up\");\n        }\n        break;\n      case \" \":\n        setGamePaused(!gamePaused);\n        break;\n      default:\n        break;\n    }\n  });\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (!gamePaused) {\n        let tempSquareList = [...squareList];\n        for (let i = 0; i < tempSquareList.length; i++) for (let j = 0; j < tempSquareList.length; j++) if (tempSquareList[i][j].head) {\n          tempSquareList[i][j].head = false;\n          switch (headDirection) {\n            case \"left\":\n              tempSquareList[i - 1][j].head = true;\n              setSquareList(tempSquareList);\n              return;\n            case \"right\":\n              console.log(tempSquareList[i + 1][j]);\n              tempSquareList[i + 1][j].head = true;\n              setSquareList(tempSquareList);\n              return;\n            case \"down\":\n              tempSquareList[i][j + 1].head = true;\n              setSquareList(tempSquareList);\n              return;\n            case \"up\":\n              tempSquareList[i][j - 1].head = true;\n              setSquareList(tempSquareList);\n              return;\n            default:\n              return;\n          }\n        }\n      }\n    }, 200);\n    return () => clearInterval(interval);\n  }, [squareList, headDirection, gamePaused]);\n\n  //setInterval(() => updateGrid(), 1000);\n\n  function getInitGrid(size) {\n    let initialSquareList = [];\n    for (let i = 0; i < size; i++) {\n      let tempRow = [];\n      for (let j = 0; j < size; j++) {\n        tempRow.push({\n          id: i * size + j + 1,\n          xPos: i,\n          yPos: j,\n          head: false,\n          tail: false,\n          fruit: false\n        });\n      }\n      initialSquareList.push(tempRow);\n    }\n    initialSquareList[8][8].head = true;\n    return initialSquareList;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Grid\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"SNAKE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), squareList.map((row, index) => /*#__PURE__*/_jsxDEV(SnakeRow, {\n      row: row\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n_s(SnakeGrid, \"okpJjxGzXhv41t4JUm/go7NJqrs=\");\n_c = SnakeGrid;\nexport default SnakeGrid;\nvar _c;\n$RefreshReg$(_c, \"SnakeGrid\");","map":{"version":3,"names":["React","useState","useEffect","SnakeRow","jsxDEV","_jsxDEV","SnakeGrid","_s","squareList","setSquareList","getInitGrid","gamePaused","setGamePaused","gameOver","setGameOver","headDirection","setHeadDirection","window","addEventListener","event","key","interval","setInterval","tempSquareList","i","length","j","head","console","log","clearInterval","size","initialSquareList","tempRow","push","id","xPos","yPos","tail","fruit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","row","index","_c","$RefreshReg$"],"sources":["C:/Users/cajso/Desktop/Projects/minesweeper/src/Components/SnakeGrid.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport SnakeRow from \"./SnakeRow\";\r\nimport { SnakeSquareType } from \"../Types\";\r\n\r\nfunction SnakeGrid() {\r\n  const [squareList, setSquareList] = useState(() => getInitGrid(16));\r\n  const [gamePaused, setGamePaused] = useState(true);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [headDirection, setHeadDirection] = useState(\"left\");\r\n\r\n  window.addEventListener(\"keydown\", (event) => {\r\n    switch (event.key) {\r\n      case \"ArrowLeft\":\r\n        if (headDirection !== \"right\") {\r\n          setHeadDirection(\"left\");\r\n        }\r\n        break;\r\n      case \"ArrowRight\":\r\n        if (headDirection !== \"left\") {\r\n          setHeadDirection(\"right\");\r\n        }\r\n        break;\r\n      case \"ArrowDown\":\r\n        if (headDirection !== \"up\") {\r\n          setHeadDirection(\"down\");\r\n        }\r\n        break;\r\n      case \"ArrowUp\":\r\n        if (headDirection !== \"down\") {\r\n          setHeadDirection(\"up\");\r\n        }\r\n        break;\r\n      case \" \":\r\n        setGamePaused(!gamePaused);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      if (!gamePaused) {\r\n        let tempSquareList = [...squareList];\r\n        for (let i = 0; i < tempSquareList.length; i++)\r\n          for (let j = 0; j < tempSquareList.length; j++)\r\n            if (tempSquareList[i][j].head) {\r\n              tempSquareList[i][j].head = false;\r\n              switch (headDirection) {\r\n                case \"left\":\r\n                  tempSquareList[i - 1][j].head = true;\r\n                  setSquareList(tempSquareList);\r\n                  return;\r\n                case \"right\":\r\n                  console.log(tempSquareList[i + 1][j]);\r\n                  tempSquareList[i + 1][j].head = true;\r\n                  setSquareList(tempSquareList);\r\n                  return;\r\n                case \"down\":\r\n                  tempSquareList[i][j + 1].head = true;\r\n                  setSquareList(tempSquareList);\r\n                  return;\r\n                case \"up\":\r\n                  tempSquareList[i][j - 1].head = true;\r\n                  setSquareList(tempSquareList);\r\n                  return;\r\n                default:\r\n                  return;\r\n              }\r\n            }\r\n      }\r\n    }, 200);\r\n    return () => clearInterval(interval);\r\n  }, [squareList, headDirection, gamePaused]);\r\n\r\n  //setInterval(() => updateGrid(), 1000);\r\n\r\n  function getInitGrid(size: number) {\r\n    let initialSquareList: SnakeSquareType[][] = [];\r\n    for (let i = 0; i < size; i++) {\r\n      let tempRow: SnakeSquareType[] = [];\r\n      for (let j = 0; j < size; j++) {\r\n        tempRow.push({\r\n          id: i * size + j + 1,\r\n          xPos: i,\r\n          yPos: j,\r\n          head: false,\r\n          tail: false,\r\n          fruit: false,\r\n        });\r\n      }\r\n      initialSquareList.push(tempRow);\r\n    }\r\n    initialSquareList[8][8].head = true;\r\n    return initialSquareList;\r\n  }\r\n\r\n  return (\r\n    <div className=\"Grid\">\r\n      <h1>SNAKE</h1>\r\n      {squareList.map((row, index) => (\r\n        <SnakeRow key={index} row={row} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SnakeGrid;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}