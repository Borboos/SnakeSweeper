{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cajso\\\\Desktop\\\\Projects\\\\minesweeper\\\\src\\\\Components\\\\MineGrid.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport MineSquare from \"./MineSquare\";\nimport MineGameOver from \"./MineGameOver\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MineGrid() {\n  _s();\n  const [squareList, setSquareList] = useState(() => getInitGrid(16));\n  const [gameOver, setGameOver] = useState(false);\n  const [gameWon, setGameWon] = useState(false);\n  const [firstSquareClicked, setFirstSquareClicked] = useState(false);\n  const [flagsLeft, setFlagsLeft] = useState(40);\n  const [timer, setTimer] = useState(0);\n  const [finalTime, setFinalTime] = useState(\"\");\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTimer(timer + 1);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [timer]);\n  function getInitGrid(size) {\n    let initialSquareList = [];\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        initialSquareList.push({\n          x: i,\n          y: j,\n          adjacentBombs: 0,\n          flipped: false,\n          flagged: false,\n          bomb: false,\n          hovered: false\n        });\n      }\n    }\n    for (let i = 0; i < 40; i++) {\n      let randX = Math.floor(Math.random() * size);\n      let randY = Math.floor(Math.random() * size);\n      let randSquare = getSquare(randX, randY, initialSquareList);\n      while (randSquare.bomb) {\n        randX = Math.floor(Math.random() * size);\n        randY = Math.floor(Math.random() * size);\n        randSquare = getSquare(randX, randY, initialSquareList);\n      }\n      randSquare.bomb = true;\n    }\n    initialSquareList.forEach(ps => {\n      const adjacentSquares = initialSquareList.filter(ss => Math.abs(ps.x - ss.x) <= 1 && Math.abs(ps.y - ss.y) <= 1 && !(ps.x === ss.x && ps.y === ss.y));\n      adjacentSquares.forEach(ss => {\n        if (ss.bomb) ps.adjacentBombs++;\n      });\n    });\n    return initialSquareList;\n  }\n  function flipAdjacentSquares(x, y) {\n    let tempList = [...squareList];\n    let pivotSquare = getSquare(x, y, tempList);\n    if (!pivotSquare.bomb) {\n      pivotSquare.flipped = true;\n      if (pivotSquare.flagged) {\n        setFlagsLeft(flagsLeft + 1);\n      }\n      setSquareList([...tempList]);\n      tempList = [...squareList];\n      pivotSquare = getSquare(x, y, tempList);\n      if (pivotSquare.adjacentBombs === 0) {\n        const adjacentSquares = tempList.filter(s => Math.abs(pivotSquare.x - s.x) <= 1 && Math.abs(pivotSquare.y - s.y) <= 1 && !(pivotSquare.x === s.x && pivotSquare.y === s.y));\n        adjacentSquares.forEach(s => {\n          if (!s.flipped) {\n            flipAdjacentSquares(s.x, s.y);\n          }\n        });\n      }\n    }\n  }\n  function gridLeftClickUpdate(x, y) {\n    if (!gameOver) {\n      let tempList = [...squareList];\n      let clickedSquare = getSquare(x, y, tempList);\n      let wasFirstClick = false;\n      if (clickedSquare.flagged) {\n        return;\n      }\n      if (!firstSquareClicked) {\n        while (clickedSquare.bomb) {\n          tempList = getInitGrid(16);\n          clickedSquare = getSquare(x, y, tempList);\n        }\n        setFirstSquareClicked(true);\n        wasFirstClick = true;\n        //gridLeftClickUpdate(x, y);\n        setTimer(0);\n      }\n      clickedSquare.flipped = true;\n      if (clickedSquare.bomb) {\n        const bombSound = new Audio(`./sounds/explosion.mp3`);\n        bombSound.play();\n        endGame(false);\n      }\n      setSquareList([...tempList]);\n      if (clickedSquare.adjacentBombs === 0) {\n        flipAdjacentSquares(x, y);\n      }\n      if (squareList.filter(s => !s.bomb && !s.flipped).length === 0) {\n        endGame(true);\n      }\n      if (wasFirstClick) {\n        gridLeftClickUpdate(x, y);\n      }\n    }\n  }\n  function gridRightClickUpdate(x, y) {\n    if (!gameOver && firstSquareClicked) {\n      let tempList = [...squareList];\n      const clickedSquare = getSquare(x, y, tempList);\n      if (clickedSquare.flagged) {\n        clickedSquare.flagged = false;\n        setFlagsLeft(flagsLeft + 1);\n      } else {\n        if (flagsLeft > 0) {\n          clickedSquare.flagged = true;\n          setFlagsLeft(flagsLeft - 1);\n        }\n      }\n      setSquareList([...tempList]);\n    }\n  }\n  function getSquare(x, y, list) {\n    return list.filter(s => s.x === x && s.y === y)[0];\n  }\n  function endGame(gameWon) {\n    if (gameWon) {\n      setGameOver(true);\n      setGameWon(true);\n    } else {\n      setGameOver(true);\n    }\n    setFinalTime(getTime());\n  }\n  function getTime() {\n    const minutes = Math.floor(timer / 60);\n    const minutesStr = minutes < 10 ? `0${minutes}` : `${minutes}`;\n    const seconds = timer % 60;\n    const secondsStr = seconds < 10 ? `0${seconds}` : `${seconds}`;\n    return `${minutesStr}:${secondsStr}`;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"MINESWEEPER\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [flagsLeft, \" BOMBS UNMARKED\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), firstSquareClicked && !gameOver ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"TIME ELAPSED: \", getTime()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Grid\",\n      children: [squareList.map((square, index) => /*#__PURE__*/_jsxDEV(MineSquare, {\n        square: square,\n        leftClick: gridLeftClickUpdate,\n        rightClick: gridRightClickUpdate\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }, this)), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), gameOver ? /*#__PURE__*/_jsxDEV(MineGameOver, {\n      gameWon: gameWon,\n      finalTime: finalTime\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n}\n_s(MineGrid, \"zc3vMMUJixknrM7dJqf2cj0H6jY=\");\n_c = MineGrid;\nexport default MineGrid;\nvar _c;\n$RefreshReg$(_c, \"MineGrid\");","map":{"version":3,"names":["React","useState","useEffect","MineSquare","MineGameOver","jsxDEV","_jsxDEV","MineGrid","_s","squareList","setSquareList","getInitGrid","gameOver","setGameOver","gameWon","setGameWon","firstSquareClicked","setFirstSquareClicked","flagsLeft","setFlagsLeft","timer","setTimer","finalTime","setFinalTime","interval","setInterval","clearInterval","size","initialSquareList","i","j","push","x","y","adjacentBombs","flipped","flagged","bomb","hovered","randX","Math","floor","random","randY","randSquare","getSquare","forEach","ps","adjacentSquares","filter","ss","abs","flipAdjacentSquares","tempList","pivotSquare","s","gridLeftClickUpdate","clickedSquare","wasFirstClick","bombSound","Audio","play","endGame","length","gridRightClickUpdate","list","getTime","minutes","minutesStr","seconds","secondsStr","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","square","index","leftClick","rightClick","_c","$RefreshReg$"],"sources":["C:/Users/cajso/Desktop/Projects/minesweeper/src/Components/MineGrid.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport MineSquare from \"./MineSquare\";\r\nimport { MineSquareType } from \"../Types\";\r\nimport MineGameOver from \"./MineGameOver\";\r\n\r\nfunction MineGrid() {\r\n  const [squareList, setSquareList] = useState(() => getInitGrid(16));\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [gameWon, setGameWon] = useState(false);\r\n  const [firstSquareClicked, setFirstSquareClicked] = useState(false);\r\n  const [flagsLeft, setFlagsLeft] = useState(40);\r\n  const [timer, setTimer] = useState(0);\r\n  const [finalTime, setFinalTime] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setTimer(timer + 1);\r\n    }, 1000);\r\n    return () => clearInterval(interval);\r\n  }, [timer]);\r\n\r\n  function getInitGrid(size: number) {\r\n    let initialSquareList: MineSquareType[] = [];\r\n    for (let i = 0; i < size; i++) {\r\n      for (let j = 0; j < size; j++) {\r\n        initialSquareList.push({\r\n          x: i,\r\n          y: j,\r\n          adjacentBombs: 0,\r\n          flipped: false,\r\n          flagged: false,\r\n          bomb: false,\r\n          hovered: false,\r\n        });\r\n      }\r\n    }\r\n    for (let i = 0; i < 40; i++) {\r\n      let randX = Math.floor(Math.random() * size);\r\n      let randY = Math.floor(Math.random() * size);\r\n      let randSquare = getSquare(randX, randY, initialSquareList);\r\n      while (randSquare.bomb) {\r\n        randX = Math.floor(Math.random() * size);\r\n        randY = Math.floor(Math.random() * size);\r\n        randSquare = getSquare(randX, randY, initialSquareList);\r\n      }\r\n      randSquare.bomb = true;\r\n    }\r\n    initialSquareList.forEach((ps) => {\r\n      const adjacentSquares = initialSquareList.filter(\r\n        (ss) =>\r\n          Math.abs(ps.x - ss.x) <= 1 &&\r\n          Math.abs(ps.y - ss.y) <= 1 &&\r\n          !(ps.x === ss.x && ps.y === ss.y)\r\n      );\r\n      adjacentSquares.forEach((ss) => {\r\n        if (ss.bomb) ps.adjacentBombs++;\r\n      });\r\n    });\r\n    return initialSquareList;\r\n  }\r\n\r\n  function flipAdjacentSquares(x: number, y: number) {\r\n    let tempList = [...squareList];\r\n    let pivotSquare = getSquare(x, y, tempList);\r\n    if (!pivotSquare.bomb) {\r\n      pivotSquare.flipped = true;\r\n      if (pivotSquare.flagged) {\r\n        setFlagsLeft(flagsLeft + 1);\r\n      }\r\n      setSquareList([...tempList]);\r\n      tempList = [...squareList];\r\n      pivotSquare = getSquare(x, y, tempList);\r\n      if (pivotSquare.adjacentBombs === 0) {\r\n        const adjacentSquares = tempList.filter(\r\n          (s) =>\r\n            Math.abs(pivotSquare.x - s.x) <= 1 &&\r\n            Math.abs(pivotSquare.y - s.y) <= 1 &&\r\n            !(pivotSquare.x === s.x && pivotSquare.y === s.y)\r\n        );\r\n        adjacentSquares.forEach((s) => {\r\n          if (!s.flipped) {\r\n            flipAdjacentSquares(s.x, s.y);\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  function gridLeftClickUpdate(x: number, y: number) {\r\n    if (!gameOver) {\r\n      let tempList = [...squareList];\r\n      let clickedSquare = getSquare(x, y, tempList);\r\n      let wasFirstClick = false;\r\n      if (clickedSquare.flagged) {\r\n        return;\r\n      }\r\n      if (!firstSquareClicked) {\r\n        while (clickedSquare.bomb) {\r\n          tempList = getInitGrid(16);\r\n          clickedSquare = getSquare(x, y, tempList);\r\n        }\r\n        setFirstSquareClicked(true);\r\n        wasFirstClick = true;\r\n        //gridLeftClickUpdate(x, y);\r\n        setTimer(0);\r\n      }\r\n      clickedSquare.flipped = true;\r\n      if (clickedSquare.bomb) {\r\n        const bombSound = new Audio(`./sounds/explosion.mp3`);\r\n        bombSound.play();\r\n        endGame(false);\r\n      }\r\n      setSquareList([...tempList]);\r\n      if (clickedSquare.adjacentBombs === 0) {\r\n        flipAdjacentSquares(x, y);\r\n      }\r\n      if (squareList.filter((s) => !s.bomb && !s.flipped).length === 0) {\r\n        endGame(true);\r\n      }\r\n      if (wasFirstClick) {\r\n        gridLeftClickUpdate(x, y);\r\n      }\r\n    }\r\n  }\r\n\r\n  function gridRightClickUpdate(x: number, y: number) {\r\n    if (!gameOver && firstSquareClicked) {\r\n      let tempList = [...squareList];\r\n      const clickedSquare = getSquare(x, y, tempList);\r\n      if (clickedSquare.flagged) {\r\n        clickedSquare.flagged = false;\r\n        setFlagsLeft(flagsLeft + 1);\r\n      } else {\r\n        if (flagsLeft > 0) {\r\n          clickedSquare.flagged = true;\r\n          setFlagsLeft(flagsLeft - 1);\r\n        }\r\n      }\r\n      setSquareList([...tempList]);\r\n    }\r\n  }\r\n\r\n  function getSquare(x: number, y: number, list: MineSquareType[]) {\r\n    return list.filter((s) => s.x === x && s.y === y)[0];\r\n  }\r\n\r\n  function endGame(gameWon: boolean) {\r\n    if (gameWon) {\r\n      setGameOver(true);\r\n      setGameWon(true);\r\n    } else {\r\n      setGameOver(true);\r\n    }\r\n    setFinalTime(getTime());\r\n  }\r\n\r\n  function getTime() {\r\n    const minutes = Math.floor(timer / 60);\r\n    const minutesStr = minutes < 10 ? `0${minutes}` : `${minutes}`;\r\n    const seconds = timer % 60;\r\n    const secondsStr = seconds < 10 ? `0${seconds}` : `${seconds}`;\r\n    return `${minutesStr}:${secondsStr}`;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>MINESWEEPER</h1>\r\n      <h2>{flagsLeft} BOMBS UNMARKED</h2>\r\n      {firstSquareClicked && !gameOver ? (\r\n        <h2>TIME ELAPSED: {getTime()}</h2>\r\n      ) : (\r\n        <div></div>\r\n      )}\r\n      <div className=\"Grid\">\r\n        {squareList.map((square, index) => (\r\n          <MineSquare\r\n            key={index}\r\n            square={square}\r\n            leftClick={gridLeftClickUpdate}\r\n            rightClick={gridRightClickUpdate}\r\n          />\r\n        ))}{\" \"}\r\n      </div>\r\n      {gameOver ? (\r\n        <MineGameOver gameWon={gameWon} finalTime={finalTime} />\r\n      ) : (\r\n        <div></div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MineGrid;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}