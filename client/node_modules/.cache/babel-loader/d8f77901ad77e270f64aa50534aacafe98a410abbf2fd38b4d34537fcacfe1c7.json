{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cajso\\\\Desktop\\\\Projects\\\\minesweeper\\\\src\\\\Components\\\\MineGrid.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport MineRow from \"./MineRow\";\nimport GameOver from \"./GameOver\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MineGrid() {\n  _s();\n  const [squareList, setSquareList] = useState(() => getInitGrid(16));\n  const [gameOver, setGameOver] = useState(false);\n  const [gameWon, setGameWon] = useState(false);\n  const [firstSquareClicked, setFirstSquareClicked] = useState(false);\n  const [flagsLeft, setFlagsLeft] = useState(40);\n  const [timer, setTimer] = useState(0);\n  const [finalTime, setFinalTime] = useState(\"\");\n  let checkedAlreadyList = [];\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTimer(timer + 1);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [timer]);\n  function getInitGrid(size) {\n    let initialSquareList = [];\n    for (let i = 0; i < size; i++) {\n      let tempRow = [];\n      for (let j = 0; j < size; j++) {\n        tempRow.push({\n          id: i * size + j + 1,\n          xPos: i,\n          yPos: j,\n          adjacentBombs: 0,\n          flipped: false,\n          flagged: false,\n          bomb: false,\n          hovered: false\n        });\n      }\n      initialSquareList.push(tempRow);\n    }\n    for (let i = 0; i < 40; i++) {\n      let randX = Math.floor(Math.random() * size);\n      let randY = Math.floor(Math.random() * size);\n      while (initialSquareList[randX][randY].bomb) {\n        randX = Math.floor(Math.random() * size);\n        randY = Math.floor(Math.random() * size);\n      }\n      initialSquareList[randX][randY].bomb = true;\n    }\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        for (let k = -1; k <= 1; k++) {\n          if (i - 1 >= 0 && j + k >= 0 && j + k <= size - 1 && initialSquareList[i - 1][j + k].bomb) {\n            initialSquareList[i][j].adjacentBombs++;\n          }\n        }\n        for (let k = -1; k <= 1; k++) {\n          if (k !== 0 && j + k >= 0 && j + k <= size - 1 && initialSquareList[i][j + k].bomb) {\n            initialSquareList[i][j].adjacentBombs++;\n          }\n        }\n        for (let k = -1; k <= 1; k++) {\n          if (i + 1 <= size - 1 && j + k >= 0 && j + k <= size - 1 && initialSquareList[i + 1][j + k].bomb) {\n            initialSquareList[i][j].adjacentBombs++;\n          }\n        }\n      }\n    }\n    return initialSquareList;\n  }\n  function flipAdjacentSquares(id) {\n    console.log(\"first clicked: \" + firstSquareClicked);\n    let tempList = [...squareList];\n    const size = tempList.length;\n    for (let i = 0; i < squareList.length; i++) {\n      for (let j = 0; j < squareList.length; j++) {\n        if (tempList[i][j].id === id) {\n          console.log(\"is bomb: \" + tempList[i][j].bomb);\n        }\n        if (tempList[i][j].id === id && tempList[i][j].bomb === false && !checkedAlreadyList.includes(id)) {\n          tempList[i][j].flipped = true;\n          if (tempList[i][j].flagged) {\n            setFlagsLeft(flagsLeft + 1);\n          }\n          setSquareList(tempList);\n          if (tempList[i][j].adjacentBombs === 0) {\n            for (let k = -1; k <= 1; k++) {\n              if (i - 1 >= 0 && j + k >= 0 && j + k <= size - 1) {\n                checkedAlreadyList.push(id);\n                flipAdjacentSquares(tempList[i - 1][j + k].id);\n              }\n            }\n            for (let k = -1; k <= 1; k++) {\n              if (k !== 0 && j + k >= 0 && j + k <= size - 1) {\n                checkedAlreadyList.push(id);\n                flipAdjacentSquares(tempList[i][j + k].id);\n              }\n            }\n            for (let k = -1; k <= 1; k++) {\n              if (i + 1 <= size - 1 && j + k >= 0 && j + k <= size - 1) {\n                checkedAlreadyList.push(id);\n                flipAdjacentSquares(tempList[i + 1][j + k].id);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  function gridLeftClickUpdate(id) {\n    if (!gameOver) {\n      let tempList = [...squareList];\n      for (let i = 0; i < tempList.length; i++) {\n        for (let j = 0; j < tempList.length; j++) {\n          if (tempList[i][j].id === id) {\n            if (tempList[i][j].flagged) {\n              return;\n            }\n            if (!firstSquareClicked) {\n              while (tempList[i][j].bomb) {\n                tempList = getInitGrid(16);\n              }\n              setFirstSquareClicked(true);\n              setTimer(0);\n            }\n            tempList[i][j].flipped = true;\n            if (tempList[i][j].bomb) {\n              const bombSound = new Audio(`./sounds/explosion.mp3`);\n              bombSound.play();\n              endGame(false);\n            }\n            setSquareList(tempList);\n            flipAdjacentSquares(id);\n            if (getEmptySquareCount() === 0) {\n              endGame(true);\n            }\n          }\n        }\n      }\n    }\n  }\n  function gridRightClickUpdate(id) {\n    if (!gameOver && firstSquareClicked) {\n      let tempList = [...squareList];\n      for (let i = 0; i < squareList.length; i++) {\n        for (let j = 0; j < squareList.length; j++) {\n          if (tempList[i][j].id === id) {\n            if (tempList[i][j].flagged) {\n              tempList[i][j].flagged = !tempList[i][j].flagged;\n              setFlagsLeft(flagsLeft + 1);\n            } else {\n              if (flagsLeft > 0) {\n                tempList[i][j].flagged = !tempList[i][j].flagged;\n                setFlagsLeft(flagsLeft - 1);\n              }\n            }\n          }\n        }\n      }\n      setSquareList(tempList);\n    }\n  }\n  function getEmptySquareCount() {\n    let count = 0;\n    for (let i = 0; i < squareList.length; i++) {\n      for (let j = 0; j < squareList.length; j++) {\n        if (!squareList[i][j].bomb && !squareList[i][j].flipped) {\n          count++;\n        }\n      }\n    }\n    return count;\n  }\n  function endGame(gameWon) {\n    if (gameWon) {\n      setGameOver(true);\n      setGameWon(true);\n    } else {\n      setGameOver(true);\n    }\n  }\n  function getTime() {\n    const minutes = Math.floor(timer / 60);\n    const minutesStr = minutes < 10 ? `0${minutes}` : `${minutes}`;\n    const seconds = timer % 60;\n    const secondsStr = seconds < 10 ? `0${seconds}` : `${seconds}`;\n    return `${minutesStr}:${secondsStr}`;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Grid\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"MINESWEEPER\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [flagsLeft, \" BOMBS UNMARKED\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), firstSquareClicked && !gameOver ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"TIME ELAPSED: \", getTime()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }, this), squareList.map((row, index) => /*#__PURE__*/_jsxDEV(MineRow, {\n      row: row,\n      leftClick: gridLeftClickUpdate,\n      rightClick: gridRightClickUpdate\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 9\n    }, this)), gameOver ? /*#__PURE__*/_jsxDEV(GameOver, {\n      gameWon: gameWon,\n      finalTime: timer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 5\n  }, this);\n}\n_s(MineGrid, \"zc3vMMUJixknrM7dJqf2cj0H6jY=\");\n_c = MineGrid;\nexport default MineGrid;\nvar _c;\n$RefreshReg$(_c, \"MineGrid\");","map":{"version":3,"names":["React","useState","useEffect","MineRow","GameOver","jsxDEV","_jsxDEV","MineGrid","_s","squareList","setSquareList","getInitGrid","gameOver","setGameOver","gameWon","setGameWon","firstSquareClicked","setFirstSquareClicked","flagsLeft","setFlagsLeft","timer","setTimer","finalTime","setFinalTime","checkedAlreadyList","interval","setInterval","clearInterval","size","initialSquareList","i","tempRow","j","push","id","xPos","yPos","adjacentBombs","flipped","flagged","bomb","hovered","randX","Math","floor","random","randY","k","flipAdjacentSquares","console","log","tempList","length","includes","gridLeftClickUpdate","bombSound","Audio","play","endGame","getEmptySquareCount","gridRightClickUpdate","count","getTime","minutes","minutesStr","seconds","secondsStr","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","row","index","leftClick","rightClick","_c","$RefreshReg$"],"sources":["C:/Users/cajso/Desktop/Projects/minesweeper/src/Components/MineGrid.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport MineRow from \"./MineRow\";\r\nimport { MineSquareType } from \"../Types\";\r\nimport GameOver from \"./GameOver\";\r\n\r\nfunction MineGrid() {\r\n  const [squareList, setSquareList] = useState(() => getInitGrid(16));\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [gameWon, setGameWon] = useState(false);\r\n  const [firstSquareClicked, setFirstSquareClicked] = useState(false);\r\n  const [flagsLeft, setFlagsLeft] = useState(40);\r\n  const [timer, setTimer] = useState(0);\r\n  const [finalTime, setFinalTime] = useState(\"\");\r\n  let checkedAlreadyList: number[] = [];\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setTimer(timer + 1);\r\n    }, 1000);\r\n    return () => clearInterval(interval);\r\n  }, [timer]);\r\n\r\n  function getInitGrid(size: number) {\r\n    let initialSquareList: MineSquareType[][] = [];\r\n    for (let i = 0; i < size; i++) {\r\n      let tempRow: MineSquareType[] = [];\r\n      for (let j = 0; j < size; j++) {\r\n        tempRow.push({\r\n          id: i * size + j + 1,\r\n          xPos: i,\r\n          yPos: j,\r\n          adjacentBombs: 0,\r\n          flipped: false,\r\n          flagged: false,\r\n          bomb: false,\r\n          hovered: false,\r\n        });\r\n      }\r\n      initialSquareList.push(tempRow);\r\n    }\r\n    for (let i = 0; i < 40; i++) {\r\n      let randX = Math.floor(Math.random() * size);\r\n      let randY = Math.floor(Math.random() * size);\r\n      while (initialSquareList[randX][randY].bomb) {\r\n        randX = Math.floor(Math.random() * size);\r\n        randY = Math.floor(Math.random() * size);\r\n      }\r\n      initialSquareList[randX][randY].bomb = true;\r\n    }\r\n    for (let i = 0; i < size; i++) {\r\n      for (let j = 0; j < size; j++) {\r\n        for (let k = -1; k <= 1; k++) {\r\n          if (\r\n            i - 1 >= 0 &&\r\n            j + k >= 0 &&\r\n            j + k <= size - 1 &&\r\n            initialSquareList[i - 1][j + k].bomb\r\n          ) {\r\n            initialSquareList[i][j].adjacentBombs++;\r\n          }\r\n        }\r\n        for (let k = -1; k <= 1; k++) {\r\n          if (\r\n            k !== 0 &&\r\n            j + k >= 0 &&\r\n            j + k <= size - 1 &&\r\n            initialSquareList[i][j + k].bomb\r\n          ) {\r\n            initialSquareList[i][j].adjacentBombs++;\r\n          }\r\n        }\r\n        for (let k = -1; k <= 1; k++) {\r\n          if (\r\n            i + 1 <= size - 1 &&\r\n            j + k >= 0 &&\r\n            j + k <= size - 1 &&\r\n            initialSquareList[i + 1][j + k].bomb\r\n          ) {\r\n            initialSquareList[i][j].adjacentBombs++;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return initialSquareList;\r\n  }\r\n\r\n  function flipAdjacentSquares(id: number) {\r\n    console.log(\"first clicked: \" + firstSquareClicked);\r\n    let tempList = [...squareList];\r\n    const size = tempList.length;\r\n    for (let i = 0; i < squareList.length; i++) {\r\n      for (let j = 0; j < squareList.length; j++) {\r\n        if (tempList[i][j].id === id) {\r\n          console.log(\"is bomb: \" + tempList[i][j].bomb);\r\n        }\r\n        if (\r\n          tempList[i][j].id === id &&\r\n          tempList[i][j].bomb === false &&\r\n          !checkedAlreadyList.includes(id)\r\n        ) {\r\n          tempList[i][j].flipped = true;\r\n          if (tempList[i][j].flagged) {\r\n            setFlagsLeft(flagsLeft + 1);\r\n          }\r\n          setSquareList(tempList);\r\n          if (tempList[i][j].adjacentBombs === 0) {\r\n            for (let k = -1; k <= 1; k++) {\r\n              if (i - 1 >= 0 && j + k >= 0 && j + k <= size - 1) {\r\n                checkedAlreadyList.push(id);\r\n                flipAdjacentSquares(tempList[i - 1][j + k].id);\r\n              }\r\n            }\r\n            for (let k = -1; k <= 1; k++) {\r\n              if (k !== 0 && j + k >= 0 && j + k <= size - 1) {\r\n                checkedAlreadyList.push(id);\r\n                flipAdjacentSquares(tempList[i][j + k].id);\r\n              }\r\n            }\r\n            for (let k = -1; k <= 1; k++) {\r\n              if (i + 1 <= size - 1 && j + k >= 0 && j + k <= size - 1) {\r\n                checkedAlreadyList.push(id);\r\n                flipAdjacentSquares(tempList[i + 1][j + k].id);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function gridLeftClickUpdate(id: number) {\r\n    if (!gameOver) {\r\n      let tempList = [...squareList];\r\n      for (let i = 0; i < tempList.length; i++) {\r\n        for (let j = 0; j < tempList.length; j++) {\r\n          if (tempList[i][j].id === id) {\r\n            if (tempList[i][j].flagged) {\r\n              return;\r\n            }\r\n            if (!firstSquareClicked) {\r\n              while (tempList[i][j].bomb) {\r\n                tempList = getInitGrid(16);\r\n              }\r\n              setFirstSquareClicked(true);\r\n              setTimer(0);\r\n            }\r\n            tempList[i][j].flipped = true;\r\n            if (tempList[i][j].bomb) {\r\n              const bombSound = new Audio(`./sounds/explosion.mp3`);\r\n              bombSound.play();\r\n              endGame(false);\r\n            }\r\n            setSquareList(tempList);\r\n            flipAdjacentSquares(id);\r\n            if (getEmptySquareCount() === 0) {\r\n              endGame(true);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function gridRightClickUpdate(id: number) {\r\n    if (!gameOver && firstSquareClicked) {\r\n      let tempList = [...squareList];\r\n      for (let i = 0; i < squareList.length; i++) {\r\n        for (let j = 0; j < squareList.length; j++) {\r\n          if (tempList[i][j].id === id) {\r\n            if (tempList[i][j].flagged) {\r\n              tempList[i][j].flagged = !tempList[i][j].flagged;\r\n              setFlagsLeft(flagsLeft + 1);\r\n            } else {\r\n              if (flagsLeft > 0) {\r\n                tempList[i][j].flagged = !tempList[i][j].flagged;\r\n                setFlagsLeft(flagsLeft - 1);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      setSquareList(tempList);\r\n    }\r\n  }\r\n\r\n  function getEmptySquareCount() {\r\n    let count = 0;\r\n    for (let i = 0; i < squareList.length; i++) {\r\n      for (let j = 0; j < squareList.length; j++) {\r\n        if (!squareList[i][j].bomb && !squareList[i][j].flipped) {\r\n          count++;\r\n        }\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n\r\n  function endGame(gameWon: boolean) {\r\n    if (gameWon) {\r\n      setGameOver(true);\r\n      setGameWon(true);\r\n    } else {\r\n      setGameOver(true);\r\n    }\r\n  }\r\n\r\n  function getTime() {\r\n    const minutes = Math.floor(timer / 60);\r\n    const minutesStr = minutes < 10 ? `0${minutes}` : `${minutes}`;\r\n    const seconds = timer % 60;\r\n    const secondsStr = seconds < 10 ? `0${seconds}` : `${seconds}`;\r\n    return `${minutesStr}:${secondsStr}`;\r\n  }\r\n\r\n  return (\r\n    <div className=\"Grid\">\r\n      <h1>MINESWEEPER</h1>\r\n      <h2>{flagsLeft} BOMBS UNMARKED</h2>\r\n      {firstSquareClicked && !gameOver ? (\r\n        <h2>TIME ELAPSED: {getTime()}</h2>\r\n      ) : (\r\n        <div></div>\r\n      )}\r\n      {squareList.map((row, index) => (\r\n        <MineRow\r\n          key={index}\r\n          row={row}\r\n          leftClick={gridLeftClickUpdate}\r\n          rightClick={gridRightClickUpdate}\r\n        />\r\n      ))}\r\n      {gameOver ? (\r\n        <GameOver gameWon={gameWon} finalTime={timer} />\r\n      ) : (\r\n        <div></div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MineGrid;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}