{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cajso\\\\Desktop\\\\Projects\\\\minesweeper\\\\src\\\\Components\\\\Grid.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Row from \"./Row\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet checkedAlreadyList = [];\nlet foo = 100;\nfunction Grid() {\n  _s();\n  function getInitGrid(size) {\n    let initialSquareList = [];\n    for (let i = 0; i < size; i++) {\n      let tempRow = [];\n      for (let j = 0; j < size; j++) {\n        tempRow.push({\n          id: i * size + j + 1,\n          xPos: i,\n          yPos: j,\n          adjacentBombs: 0,\n          flipped: false,\n          flagged: false,\n          bomb: false\n        });\n      }\n      initialSquareList.push(tempRow);\n    }\n    for (let i = 0; i < 40; i++) {\n      let randX = Math.floor(Math.random() * size);\n      let randY = Math.floor(Math.random() * size);\n      while (initialSquareList[randX][randY].bomb === true) {\n        randX = Math.floor(Math.random() * size);\n        randY = Math.floor(Math.random() * size);\n      }\n      initialSquareList[randX][randY].bomb = true;\n    }\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        for (let k = -1; k <= 1; k++) {\n          if (i - 1 >= 0 && j + k >= 0 && j + k <= size - 1 && initialSquareList[i - 1][j + k].bomb === true) initialSquareList[i][j].adjacentBombs++;\n        }\n        for (let k = -1; k <= 1; k++) {\n          if (k !== 0 && j + k >= 0 && j + k <= size - 1 && initialSquareList[i][j + k].bomb === true) initialSquareList[i][j].adjacentBombs++;\n        }\n        for (let k = -1; k <= 1; k++) {\n          if (i + 1 <= size - 1 && j + k >= 0 && j + k <= size - 1 && initialSquareList[i + 1][j + k].bomb === true) initialSquareList[i][j].adjacentBombs++;\n        }\n      }\n    }\n    return initialSquareList;\n  }\n  function flipAdjacentSquares(id) {\n    let tempList = [...squareList];\n    const size = tempList.length;\n    for (let i = 0; i < squareList.length; i++) for (let j = 0; j < squareList.length; j++) if (tempList[i][j].id === id && tempList[i][j].bomb === false && tempList[i][j].adjacentBombs === 0 && !checkedAlreadyList.includes(id)) {\n      if (foo > 0) {\n        console.log(`FOO: ${foo}`);\n        foo--;\n        console.log(id);\n        console.log(checkedAlreadyList);\n      }\n      tempList[i][j].flipped = true;\n      setSquareList(tempList);\n      for (let k = -1; k <= 1; k++) {\n        if (i - 1 >= 0 && j + k >= 0 && j + k <= size - 1) {\n          checkedAlreadyList.push(id);\n          flipAdjacentSquares(tempList[i - 1][j + k].id);\n        }\n      }\n      for (let k = -1; k <= 1; k++) {\n        if (k !== 0 && j + k >= 0 && j + k <= size - 1) {\n          checkedAlreadyList.push(id);\n          flipAdjacentSquares(tempList[i][j + k].id);\n        }\n      }\n      for (let k = -1; k <= 1; k++) {\n        if (i + 1 <= size - 1 && j + k >= 0 && j + k <= size - 1) {\n          checkedAlreadyList.push(id);\n          flipAdjacentSquares(tempList[i + 1][j + k].id);\n        }\n      }\n    }\n  }\n  function gridLeftClickUpdate(id) {\n    let tempList = [...squareList];\n    for (let i = 0; i < squareList.length; i++) for (let j = 0; j < squareList.length; j++) if (tempList[i][j].id === id) tempList[i][j].flipped = true;\n    setSquareList(tempList);\n    flipAdjacentSquares(id);\n  }\n  const [squareList, setSquareList] = useState(() => getInitGrid(16));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Grid\",\n    children: [squareList.map((row, index) => /*#__PURE__*/_jsxDEV(Row, {\n      test: false,\n      row: row,\n      updateSquare: gridLeftClickUpdate\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), squareList.map((row, index) => /*#__PURE__*/_jsxDEV(Row, {\n      test: true,\n      row: row,\n      updateSquare: gridLeftClickUpdate\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n_s(Grid, \"AlZJnJ91tOAjdPcCJfkkPYuTMiA=\");\n_c = Grid;\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useState","Row","jsxDEV","_jsxDEV","checkedAlreadyList","foo","Grid","_s","getInitGrid","size","initialSquareList","i","tempRow","j","push","id","xPos","yPos","adjacentBombs","flipped","flagged","bomb","randX","Math","floor","random","randY","k","flipAdjacentSquares","tempList","squareList","length","includes","console","log","setSquareList","gridLeftClickUpdate","className","children","map","row","index","test","updateSquare","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/cajso/Desktop/Projects/minesweeper/src/Components/Grid.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Row from \"./Row\";\r\nimport { SquareType } from \"../Types\";\r\n\r\nlet checkedAlreadyList: number[] = [];\r\nlet foo = 100;\r\n\r\nfunction Grid() {\r\n  function getInitGrid(size: number) {\r\n    let initialSquareList: SquareType[][] = [];\r\n    for (let i = 0; i < size; i++) {\r\n      let tempRow: SquareType[] = [];\r\n      for (let j = 0; j < size; j++) {\r\n        tempRow.push({\r\n          id: i * size + j + 1,\r\n          xPos: i,\r\n          yPos: j,\r\n          adjacentBombs: 0,\r\n          flipped: false,\r\n          flagged: false,\r\n          bomb: false,\r\n        });\r\n      }\r\n      initialSquareList.push(tempRow);\r\n    }\r\n    for (let i = 0; i < 40; i++) {\r\n      let randX = Math.floor(Math.random() * size);\r\n      let randY = Math.floor(Math.random() * size);\r\n      while (initialSquareList[randX][randY].bomb === true) {\r\n        randX = Math.floor(Math.random() * size);\r\n        randY = Math.floor(Math.random() * size);\r\n      }\r\n      initialSquareList[randX][randY].bomb = true;\r\n    }\r\n    for (let i = 0; i < size; i++) {\r\n      for (let j = 0; j < size; j++) {\r\n        for (let k = -1; k <= 1; k++) {\r\n          if (\r\n            i - 1 >= 0 &&\r\n            j + k >= 0 &&\r\n            j + k <= size - 1 &&\r\n            initialSquareList[i - 1][j + k].bomb === true\r\n          )\r\n            initialSquareList[i][j].adjacentBombs++;\r\n        }\r\n        for (let k = -1; k <= 1; k++) {\r\n          if (\r\n            k !== 0 &&\r\n            j + k >= 0 &&\r\n            j + k <= size - 1 &&\r\n            initialSquareList[i][j + k].bomb === true\r\n          )\r\n            initialSquareList[i][j].adjacentBombs++;\r\n        }\r\n        for (let k = -1; k <= 1; k++) {\r\n          if (\r\n            i + 1 <= size - 1 &&\r\n            j + k >= 0 &&\r\n            j + k <= size - 1 &&\r\n            initialSquareList[i + 1][j + k].bomb === true\r\n          )\r\n            initialSquareList[i][j].adjacentBombs++;\r\n        }\r\n      }\r\n    }\r\n    return initialSquareList;\r\n  }\r\n  function flipAdjacentSquares(id: number) {\r\n    let tempList = [...squareList];\r\n    const size = tempList.length;\r\n    for (let i = 0; i < squareList.length; i++)\r\n      for (let j = 0; j < squareList.length; j++)\r\n        if (\r\n          tempList[i][j].id === id &&\r\n          tempList[i][j].bomb === false &&\r\n          tempList[i][j].adjacentBombs === 0 &&\r\n          !checkedAlreadyList.includes(id)\r\n        ) {\r\n          if (foo > 0) {\r\n            console.log(`FOO: ${foo}`);\r\n            foo--;\r\n            console.log(id);\r\n            console.log(checkedAlreadyList);\r\n          }\r\n          tempList[i][j].flipped = true;\r\n          setSquareList(tempList);\r\n          for (let k = -1; k <= 1; k++) {\r\n            if (i - 1 >= 0 && j + k >= 0 && j + k <= size - 1) {\r\n              checkedAlreadyList.push(id);\r\n              flipAdjacentSquares(tempList[i - 1][j + k].id);\r\n            }\r\n          }\r\n          for (let k = -1; k <= 1; k++) {\r\n            if (k !== 0 && j + k >= 0 && j + k <= size - 1) {\r\n              checkedAlreadyList.push(id);\r\n              flipAdjacentSquares(tempList[i][j + k].id);\r\n            }\r\n          }\r\n          for (let k = -1; k <= 1; k++) {\r\n            if (i + 1 <= size - 1 && j + k >= 0 && j + k <= size - 1) {\r\n              checkedAlreadyList.push(id);\r\n              flipAdjacentSquares(tempList[i + 1][j + k].id);\r\n            }\r\n          }\r\n        }\r\n  }\r\n  function gridLeftClickUpdate(id: number) {\r\n    let tempList = [...squareList];\r\n    for (let i = 0; i < squareList.length; i++)\r\n      for (let j = 0; j < squareList.length; j++)\r\n        if (tempList[i][j].id === id) tempList[i][j].flipped = true;\r\n    setSquareList(tempList);\r\n    flipAdjacentSquares(id);\r\n  }\r\n  const [squareList, setSquareList] = useState(() => getInitGrid(16));\r\n  return (\r\n    <div className=\"Grid\">\r\n      {squareList.map((row, index) => (\r\n        <Row\r\n          key={index}\r\n          test={false}\r\n          row={row}\r\n          updateSquare={gridLeftClickUpdate}\r\n        />\r\n      ))}\r\n      <br></br>\r\n      {squareList.map((row, index) => (\r\n        <Row\r\n          key={index}\r\n          test={true}\r\n          row={row}\r\n          updateSquare={gridLeftClickUpdate}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Grid;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}