{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cajso\\\\Desktop\\\\Projects\\\\minesweeper\\\\src\\\\Components\\\\SnakeGrid.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport SnakeRow from \"./SnakeRow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SnakeGrid() {\n  _s();\n  window.addEventListener(\"keydown\", event => {\n    switch (event.key) {\n      case \"ArrowLeft\":\n        headDirection = \"left\";\n        break;\n      case \"ArrowRight\":\n        headDirection = \"right\";\n        break;\n      case \"ArrowDown\":\n        headDirection = \"down\";\n        break;\n      case \"ArrowUp\":\n        headDirection = \"up\";\n        break;\n      default:\n        break;\n    }\n  });\n  setInterval(() => updateGrid(), 500);\n  let headDirection = \"left\";\n  const [squareList, setSquareList] = useState(() => getInitGrid(16));\n  function getInitGrid(size) {\n    let initialSquareList = [];\n    for (let i = 0; i < size; i++) {\n      let tempRow = [];\n      for (let j = 0; j < size; j++) {\n        tempRow.push({\n          id: i * size + j + 1,\n          xPos: i,\n          yPos: j,\n          head: false,\n          tail: false,\n          fruit: false\n        });\n        if (i === 8 && j === 8) tempRow[8].head = true;\n      }\n      initialSquareList.push(tempRow);\n    }\n    return initialSquareList;\n  }\n  function updateGrid() {\n    switch (headDirection) {\n      case \"left\":\n        break;\n      case \"right\":\n        break;\n      case \"down\":\n        break;\n      case \"up\":\n        break;\n      default:\n        break;\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Grid\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"SNAKE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), squareList.map((row, index) => /*#__PURE__*/_jsxDEV(SnakeRow, {\n      row: row\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(SnakeGrid, \"AlZJnJ91tOAjdPcCJfkkPYuTMiA=\");\n_c = SnakeGrid;\nexport default SnakeGrid;\nvar _c;\n$RefreshReg$(_c, \"SnakeGrid\");","map":{"version":3,"names":["React","useState","SnakeRow","jsxDEV","_jsxDEV","SnakeGrid","_s","window","addEventListener","event","key","headDirection","setInterval","updateGrid","squareList","setSquareList","getInitGrid","size","initialSquareList","i","tempRow","j","push","id","xPos","yPos","head","tail","fruit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","row","index","_c","$RefreshReg$"],"sources":["C:/Users/cajso/Desktop/Projects/minesweeper/src/Components/SnakeGrid.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport SnakeRow from \"./SnakeRow\";\r\nimport { SnakeSquareType } from \"../Types\";\r\n\r\nfunction SnakeGrid() {\r\n  window.addEventListener(\"keydown\", (event) => {\r\n    switch (event.key) {\r\n      case \"ArrowLeft\":\r\n        headDirection = \"left\";\r\n        break;\r\n      case \"ArrowRight\":\r\n        headDirection = \"right\";\r\n        break;\r\n      case \"ArrowDown\":\r\n        headDirection = \"down\";\r\n        break;\r\n      case \"ArrowUp\":\r\n        headDirection = \"up\";\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n\r\n  setInterval(() => updateGrid(), 500);\r\n\r\n  let headDirection = \"left\";\r\n  const [squareList, setSquareList] = useState(() => getInitGrid(16));\r\n\r\n  function getInitGrid(size: number) {\r\n    let initialSquareList: SnakeSquareType[][] = [];\r\n    for (let i = 0; i < size; i++) {\r\n      let tempRow: SnakeSquareType[] = [];\r\n      for (let j = 0; j < size; j++) {\r\n        tempRow.push({\r\n          id: i * size + j + 1,\r\n          xPos: i,\r\n          yPos: j,\r\n          head: false,\r\n          tail: false,\r\n          fruit: false,\r\n        });\r\n        if (i === 8 && j === 8) tempRow[8].head = true;\r\n      }\r\n      initialSquareList.push(tempRow);\r\n    }\r\n    return initialSquareList;\r\n  }\r\n\r\n  function updateGrid() {\r\n    switch (headDirection) {\r\n      case \"left\":\r\n        break;\r\n      case \"right\":\r\n        break;\r\n      case \"down\":\r\n        break;\r\n      case \"up\":\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"Grid\">\r\n      <h1>SNAKE</h1>\r\n      {squareList.map((row, index) => (\r\n        <SnakeRow key={index} row={row} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SnakeGrid;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGlC,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnBC,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAGC,KAAK,IAAK;IAC5C,QAAQA,KAAK,CAACC,GAAG;MACf,KAAK,WAAW;QACdC,aAAa,GAAG,MAAM;QACtB;MACF,KAAK,YAAY;QACfA,aAAa,GAAG,OAAO;QACvB;MACF,KAAK,WAAW;QACdA,aAAa,GAAG,MAAM;QACtB;MACF,KAAK,SAAS;QACZA,aAAa,GAAG,IAAI;QACpB;MACF;QACE;IACJ;EACF,CAAC,CAAC;EAEFC,WAAW,CAAC,MAAMC,UAAU,CAAC,CAAC,EAAE,GAAG,CAAC;EAEpC,IAAIF,aAAa,GAAG,MAAM;EAC1B,MAAM,CAACG,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,MAAMe,WAAW,CAAC,EAAE,CAAC,CAAC;EAEnE,SAASA,WAAWA,CAACC,IAAY,EAAE;IACjC,IAAIC,iBAAsC,GAAG,EAAE;IAC/C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,EAAEE,CAAC,EAAE,EAAE;MAC7B,IAAIC,OAA0B,GAAG,EAAE;MACnC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,IAAI,EAAEI,CAAC,EAAE,EAAE;QAC7BD,OAAO,CAACE,IAAI,CAAC;UACXC,EAAE,EAAEJ,CAAC,GAAGF,IAAI,GAAGI,CAAC,GAAG,CAAC;UACpBG,IAAI,EAAEL,CAAC;UACPM,IAAI,EAAEJ,CAAC;UACPK,IAAI,EAAE,KAAK;UACXC,IAAI,EAAE,KAAK;UACXC,KAAK,EAAE;QACT,CAAC,CAAC;QACF,IAAIT,CAAC,KAAK,CAAC,IAAIE,CAAC,KAAK,CAAC,EAAED,OAAO,CAAC,CAAC,CAAC,CAACM,IAAI,GAAG,IAAI;MAChD;MACAR,iBAAiB,CAACI,IAAI,CAACF,OAAO,CAAC;IACjC;IACA,OAAOF,iBAAiB;EAC1B;EAEA,SAASL,UAAUA,CAAA,EAAG;IACpB,QAAQF,aAAa;MACnB,KAAK,MAAM;QACT;MACF,KAAK,OAAO;QACV;MACF,KAAK,MAAM;QACT;MACF,KAAK,IAAI;QACP;MACF;QACE;IACJ;EACF;EAEA,oBACEP,OAAA;IAAKyB,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACnB1B,OAAA;MAAA0B,QAAA,EAAI;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACbpB,UAAU,CAACqB,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACzBjC,OAAA,CAACF,QAAQ;MAAakC,GAAG,EAAEA;IAAI,GAAhBC,KAAK;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAa,CAClC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAAC5B,EAAA,CApEQD,SAAS;AAAAiC,EAAA,GAATjC,SAAS;AAsElB,eAAeA,SAAS;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}