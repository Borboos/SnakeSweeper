{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cajso\\\\Desktop\\\\Projects\\\\minesweeper\\\\src\\\\Components\\\\SnakeGrid.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport SnakeRow from \"./SnakeRow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SnakeGrid() {\n  _s();\n  window.addEventListener(\"keydown\", event => {\n    console.log(event.key);\n    switch (event.key) {\n      case \"ArrowLeft\":\n        headDirection = \"left\";\n        break;\n      case \"ArrowRight\":\n        headDirection = \"right\";\n        break;\n      case \"ArrowDown\":\n        headDirection = \"down\";\n        break;\n      case \"ArrowUp\":\n        headDirection = \"up\";\n        break;\n      case \" \":\n        gamePaused = !gamePaused;\n        break;\n      default:\n        break;\n    }\n  });\n  //setInterval(() => updateGrid(), 1000);\n\n  let headDirection = \"left\";\n  let gamePaused = true;\n  const [squareList, setSquareList] = useState(() => getInitGrid(25));\n  const [startTime, setStartTime] = useState(undefined);\n  function step(time) {\n    if (startTime === undefined) {\n      setStartTime(time);\n    } else {\n      const delta = time - startTime;\n      if (delta > 1000) {\n        updateGrid();\n      }\n    }\n    requestAnimationFrame(step);\n  }\n  useEffect(() => {\n    requestAnimationFrame(step);\n  }, []);\n  function getInitGrid(size) {\n    let initialSquareList = [];\n    for (let i = 0; i < size; i++) {\n      let tempRow = [];\n      for (let j = 0; j < size; j++) {\n        tempRow.push({\n          id: i * size + j + 1,\n          xPos: i,\n          yPos: j,\n          head: false,\n          tail: false,\n          fruit: false\n        });\n      }\n      initialSquareList.push(tempRow);\n    }\n    initialSquareList[8][20].head = true;\n    return initialSquareList;\n  }\n  function updateGrid() {\n    let tempSquareList = [...squareList];\n    for (let i = 0; i < tempSquareList.length; i++) for (let j = 0; j < tempSquareList.length; j++) if (tempSquareList[i][j].head) {\n      tempSquareList[i][j].head = false;\n      switch (headDirection) {\n        case \"left\":\n          tempSquareList[i][j - 1].head = true;\n          break;\n        case \"right\":\n          tempSquareList[i][j + 1].head = true;\n          break;\n        case \"down\":\n          tempSquareList[i + 1][j].head = true;\n          break;\n        case \"up\":\n          tempSquareList[i - 1][j].head = true;\n          break;\n        default:\n          break;\n      }\n    }\n    setSquareList(tempSquareList);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Grid\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"SNAKE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), squareList.map((row, index) => /*#__PURE__*/_jsxDEV(SnakeRow, {\n      row: row\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n_s(SnakeGrid, \"4qOy5Qm6bMkSwQD/MyaSMxowDug=\");\n_c = SnakeGrid;\nexport default SnakeGrid;\nvar _c;\n$RefreshReg$(_c, \"SnakeGrid\");","map":{"version":3,"names":["React","useState","useEffect","SnakeRow","jsxDEV","_jsxDEV","SnakeGrid","_s","window","addEventListener","event","console","log","key","headDirection","gamePaused","squareList","setSquareList","getInitGrid","startTime","setStartTime","undefined","step","time","delta","updateGrid","requestAnimationFrame","size","initialSquareList","i","tempRow","j","push","id","xPos","yPos","head","tail","fruit","tempSquareList","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","row","index","_c","$RefreshReg$"],"sources":["C:/Users/cajso/Desktop/Projects/minesweeper/src/Components/SnakeGrid.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport SnakeRow from \"./SnakeRow\";\r\nimport { SnakeSquareType } from \"../Types\";\r\n\r\nfunction SnakeGrid() {\r\n  window.addEventListener(\"keydown\", (event) => {\r\n    console.log(event.key);\r\n    switch (event.key) {\r\n      case \"ArrowLeft\":\r\n        headDirection = \"left\";\r\n        break;\r\n      case \"ArrowRight\":\r\n        headDirection = \"right\";\r\n        break;\r\n      case \"ArrowDown\":\r\n        headDirection = \"down\";\r\n        break;\r\n      case \"ArrowUp\":\r\n        headDirection = \"up\";\r\n        break;\r\n      case \" \":\r\n        gamePaused = !gamePaused;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n  //setInterval(() => updateGrid(), 1000);\r\n\r\n  let headDirection = \"left\";\r\n  let gamePaused = true;\r\n  const [squareList, setSquareList] = useState(() => getInitGrid(25));\r\n  const [startTime, setStartTime] = useState<number | undefined>(undefined);\r\n\r\n  function step(time: number) {\r\n    if (startTime === undefined) {\r\n      setStartTime(time);\r\n    } else {\r\n      const delta = time - startTime;\r\n      if (delta > 1000) {\r\n        updateGrid();\r\n      }\r\n    }\r\n    requestAnimationFrame(step);\r\n  }\r\n\r\n  useEffect(() => {\r\n    requestAnimationFrame(step);\r\n  }, []);\r\n\r\n  function getInitGrid(size: number) {\r\n    let initialSquareList: SnakeSquareType[][] = [];\r\n    for (let i = 0; i < size; i++) {\r\n      let tempRow: SnakeSquareType[] = [];\r\n      for (let j = 0; j < size; j++) {\r\n        tempRow.push({\r\n          id: i * size + j + 1,\r\n          xPos: i,\r\n          yPos: j,\r\n          head: false,\r\n          tail: false,\r\n          fruit: false,\r\n        });\r\n      }\r\n      initialSquareList.push(tempRow);\r\n    }\r\n    initialSquareList[8][20].head = true;\r\n    return initialSquareList;\r\n  }\r\n\r\n  function updateGrid() {\r\n    let tempSquareList = [...squareList];\r\n    for (let i = 0; i < tempSquareList.length; i++)\r\n      for (let j = 0; j < tempSquareList.length; j++)\r\n        if (tempSquareList[i][j].head) {\r\n          tempSquareList[i][j].head = false;\r\n          switch (headDirection) {\r\n            case \"left\":\r\n              tempSquareList[i][j - 1].head = true;\r\n              break;\r\n            case \"right\":\r\n              tempSquareList[i][j + 1].head = true;\r\n              break;\r\n            case \"down\":\r\n              tempSquareList[i + 1][j].head = true;\r\n              break;\r\n            case \"up\":\r\n              tempSquareList[i - 1][j].head = true;\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n        }\r\n    setSquareList(tempSquareList);\r\n  }\r\n\r\n  return (\r\n    <div className=\"Grid\">\r\n      <h1>SNAKE</h1>\r\n      {squareList.map((row, index) => (\r\n        <SnakeRow key={index} row={row} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SnakeGrid;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}