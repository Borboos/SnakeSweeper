{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cajso\\\\Desktop\\\\Projects\\\\minesweeper\\\\src\\\\Components\\\\MineGrid.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport MineRow from \"./MineRow\";\nimport GameOver from \"./GameOver\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MineGrid() {\n  _s();\n  const [squareList, setSquareList] = useState(() => getInitGrid(16));\n  const [gameOver, setGameOver] = useState(false);\n  const [gameWon, setGameWon] = useState(false);\n  let checkedAlreadyList = [];\n  let bunga = true;\n  console.log(\"render log: \" + bunga);\n  function getInitGrid(size) {\n    let initialSquareList = [];\n    for (let i = 0; i < size; i++) {\n      let tempRow = [];\n      for (let j = 0; j < size; j++) {\n        tempRow.push({\n          id: i * size + j + 1,\n          xPos: i,\n          yPos: j,\n          adjacentBombs: 0,\n          flipped: false,\n          flagged: false,\n          bomb: false,\n          hovered: false\n        });\n      }\n      initialSquareList.push(tempRow);\n    }\n    for (let i = 0; i < 40; i++) {\n      let randX = Math.floor(Math.random() * size);\n      let randY = Math.floor(Math.random() * size);\n      while (initialSquareList[randX][randY].bomb === true) {\n        randX = Math.floor(Math.random() * size);\n        randY = Math.floor(Math.random() * size);\n      }\n      initialSquareList[randX][randY].bomb = true;\n    }\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        for (let k = -1; k <= 1; k++) {\n          if (i - 1 >= 0 && j + k >= 0 && j + k <= size - 1 && initialSquareList[i - 1][j + k].bomb === true) {\n            initialSquareList[i][j].adjacentBombs++;\n          }\n        }\n        for (let k = -1; k <= 1; k++) {\n          if (k !== 0 && j + k >= 0 && j + k <= size - 1 && initialSquareList[i][j + k].bomb === true) {\n            initialSquareList[i][j].adjacentBombs++;\n          }\n        }\n        for (let k = -1; k <= 1; k++) {\n          if (i + 1 <= size - 1 && j + k >= 0 && j + k <= size - 1 && initialSquareList[i + 1][j + k].bomb === true) {\n            initialSquareList[i][j].adjacentBombs++;\n          }\n        }\n      }\n    }\n    return initialSquareList;\n  }\n  function flipAdjacentSquares(id) {\n    let tempList = [...squareList];\n    const size = tempList.length;\n    for (let i = 0; i < squareList.length; i++) {\n      for (let j = 0; j < squareList.length; j++) {\n        if (tempList[i][j].id === id && tempList[i][j].bomb === false && !checkedAlreadyList.includes(id)) {\n          tempList[i][j].flipped = true;\n          setSquareList(tempList);\n          if (tempList[i][j].adjacentBombs === 0) {\n            for (let k = -1; k <= 1; k++) {\n              if (i - 1 >= 0 && j + k >= 0 && j + k <= size - 1) {\n                checkedAlreadyList.push(id);\n                flipAdjacentSquares(tempList[i - 1][j + k].id);\n              }\n            }\n            for (let k = -1; k <= 1; k++) {\n              if (k !== 0 && j + k >= 0 && j + k <= size - 1) {\n                checkedAlreadyList.push(id);\n                flipAdjacentSquares(tempList[i][j + k].id);\n              }\n            }\n            for (let k = -1; k <= 1; k++) {\n              if (i + 1 <= size - 1 && j + k >= 0 && j + k <= size - 1) {\n                checkedAlreadyList.push(id);\n                flipAdjacentSquares(tempList[i + 1][j + k].id);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  function gridLeftClickUpdate(id) {\n    bunga = false;\n    console.log(\"click log: \" + bunga);\n    if (!gameOver) {\n      let tempList = [...squareList];\n      for (let i = 0; i < squareList.length; i++) {\n        for (let j = 0; j < squareList.length; j++) {\n          if (tempList[i][j].id === id) {\n            tempList[i][j].flipped = true;\n            if (tempList[i][j].bomb) gameEnd(false);\n          }\n        }\n      }\n      setSquareList(tempList);\n      flipAdjacentSquares(id);\n      if (getEmptySquareCount() === 0) {\n        gameEnd(true);\n      }\n    }\n  }\n  function gridRightClickUpdate(id) {\n    if (!gameOver) {\n      let tempList = [...squareList];\n      for (let i = 0; i < squareList.length; i++) {\n        for (let j = 0; j < squareList.length; j++) {\n          if (tempList[i][j].id === id) {\n            tempList[i][j].flagged = !tempList[i][j].flagged;\n          }\n        }\n      }\n      setSquareList(tempList);\n    }\n  }\n  function getEmptySquareCount() {\n    let count = 0;\n    for (let i = 0; i < squareList.length; i++) {\n      for (let j = 0; j < squareList.length; j++) {\n        if (!squareList[i][j].bomb && !squareList[i][j].flipped) {\n          count++;\n        }\n      }\n    }\n    return count;\n  }\n  function gameEnd(gameWon) {\n    if (gameWon) {\n      setGameOver(true);\n      setGameWon(true);\n    } else {\n      setGameOver(true);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Grid\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"MINESWEEPER\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), squareList.map((row, index) => /*#__PURE__*/_jsxDEV(MineRow, {\n      row: row,\n      leftClick: gridLeftClickUpdate,\n      rightClick: gridRightClickUpdate\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }, this)), gameOver ? /*#__PURE__*/_jsxDEV(GameOver, {\n      gameWon: gameWon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 19\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 52\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 5\n  }, this);\n}\n_s(MineGrid, \"oLhC91GVt0qMK2w28XHqaOn/xnA=\");\n_c = MineGrid;\nexport default MineGrid;\nvar _c;\n$RefreshReg$(_c, \"MineGrid\");","map":{"version":3,"names":["React","useState","MineRow","GameOver","jsxDEV","_jsxDEV","MineGrid","_s","squareList","setSquareList","getInitGrid","gameOver","setGameOver","gameWon","setGameWon","checkedAlreadyList","bunga","console","log","size","initialSquareList","i","tempRow","j","push","id","xPos","yPos","adjacentBombs","flipped","flagged","bomb","hovered","randX","Math","floor","random","randY","k","flipAdjacentSquares","tempList","length","includes","gridLeftClickUpdate","gameEnd","getEmptySquareCount","gridRightClickUpdate","count","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","row","index","leftClick","rightClick","_c","$RefreshReg$"],"sources":["C:/Users/cajso/Desktop/Projects/minesweeper/src/Components/MineGrid.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport MineRow from \"./MineRow\";\r\nimport { MineSquareType } from \"../Types\";\r\nimport GameOver from \"./GameOver\";\r\n\r\nfunction MineGrid() {\r\n  const [squareList, setSquareList] = useState(() => getInitGrid(16));\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [gameWon, setGameWon] = useState(false);\r\n  let checkedAlreadyList: number[] = [];\r\n  let bunga = true;\r\n  console.log(\"render log: \" + bunga);\r\n\r\n  function getInitGrid(size: number) {\r\n    let initialSquareList: MineSquareType[][] = [];\r\n    for (let i = 0; i < size; i++) {\r\n      let tempRow: MineSquareType[] = [];\r\n      for (let j = 0; j < size; j++) {\r\n        tempRow.push({\r\n          id: i * size + j + 1,\r\n          xPos: i,\r\n          yPos: j,\r\n          adjacentBombs: 0,\r\n          flipped: false,\r\n          flagged: false,\r\n          bomb: false,\r\n          hovered: false,\r\n        });\r\n      }\r\n      initialSquareList.push(tempRow);\r\n    }\r\n    for (let i = 0; i < 40; i++) {\r\n      let randX = Math.floor(Math.random() * size);\r\n      let randY = Math.floor(Math.random() * size);\r\n      while (initialSquareList[randX][randY].bomb === true) {\r\n        randX = Math.floor(Math.random() * size);\r\n        randY = Math.floor(Math.random() * size);\r\n      }\r\n      initialSquareList[randX][randY].bomb = true;\r\n    }\r\n    for (let i = 0; i < size; i++) {\r\n      for (let j = 0; j < size; j++) {\r\n        for (let k = -1; k <= 1; k++) {\r\n          if (\r\n            i - 1 >= 0 &&\r\n            j + k >= 0 &&\r\n            j + k <= size - 1 &&\r\n            initialSquareList[i - 1][j + k].bomb === true\r\n          ) {\r\n            initialSquareList[i][j].adjacentBombs++;\r\n          }\r\n        }\r\n        for (let k = -1; k <= 1; k++) {\r\n          if (\r\n            k !== 0 &&\r\n            j + k >= 0 &&\r\n            j + k <= size - 1 &&\r\n            initialSquareList[i][j + k].bomb === true\r\n          ) {\r\n            initialSquareList[i][j].adjacentBombs++;\r\n          }\r\n        }\r\n        for (let k = -1; k <= 1; k++) {\r\n          if (\r\n            i + 1 <= size - 1 &&\r\n            j + k >= 0 &&\r\n            j + k <= size - 1 &&\r\n            initialSquareList[i + 1][j + k].bomb === true\r\n          ) {\r\n            initialSquareList[i][j].adjacentBombs++;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return initialSquareList;\r\n  }\r\n\r\n  function flipAdjacentSquares(id: number) {\r\n    let tempList = [...squareList];\r\n    const size = tempList.length;\r\n    for (let i = 0; i < squareList.length; i++) {\r\n      for (let j = 0; j < squareList.length; j++) {\r\n        if (\r\n          tempList[i][j].id === id &&\r\n          tempList[i][j].bomb === false &&\r\n          !checkedAlreadyList.includes(id)\r\n        ) {\r\n          tempList[i][j].flipped = true;\r\n          setSquareList(tempList);\r\n          if (tempList[i][j].adjacentBombs === 0) {\r\n            for (let k = -1; k <= 1; k++) {\r\n              if (i - 1 >= 0 && j + k >= 0 && j + k <= size - 1) {\r\n                checkedAlreadyList.push(id);\r\n                flipAdjacentSquares(tempList[i - 1][j + k].id);\r\n              }\r\n            }\r\n            for (let k = -1; k <= 1; k++) {\r\n              if (k !== 0 && j + k >= 0 && j + k <= size - 1) {\r\n                checkedAlreadyList.push(id);\r\n                flipAdjacentSquares(tempList[i][j + k].id);\r\n              }\r\n            }\r\n            for (let k = -1; k <= 1; k++) {\r\n              if (i + 1 <= size - 1 && j + k >= 0 && j + k <= size - 1) {\r\n                checkedAlreadyList.push(id);\r\n                flipAdjacentSquares(tempList[i + 1][j + k].id);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function gridLeftClickUpdate(id: number) {\r\n    bunga = false;\r\n    console.log(\"click log: \" + bunga);\r\n    if (!gameOver) {\r\n      let tempList = [...squareList];\r\n      for (let i = 0; i < squareList.length; i++) {\r\n        for (let j = 0; j < squareList.length; j++) {\r\n          if (tempList[i][j].id === id) {\r\n            tempList[i][j].flipped = true;\r\n            if (tempList[i][j].bomb) gameEnd(false);\r\n          }\r\n        }\r\n      }\r\n      setSquareList(tempList);\r\n      flipAdjacentSquares(id);\r\n      if (getEmptySquareCount() === 0) {\r\n        gameEnd(true);\r\n      }\r\n    }\r\n  }\r\n\r\n  function gridRightClickUpdate(id: number) {\r\n    if (!gameOver) {\r\n      let tempList = [...squareList];\r\n      for (let i = 0; i < squareList.length; i++) {\r\n        for (let j = 0; j < squareList.length; j++) {\r\n          if (tempList[i][j].id === id) {\r\n            tempList[i][j].flagged = !tempList[i][j].flagged;\r\n          }\r\n        }\r\n      }\r\n      setSquareList(tempList);\r\n    }\r\n  }\r\n\r\n  function getEmptySquareCount() {\r\n    let count = 0;\r\n    for (let i = 0; i < squareList.length; i++) {\r\n      for (let j = 0; j < squareList.length; j++) {\r\n        if (!squareList[i][j].bomb && !squareList[i][j].flipped) {\r\n          count++;\r\n        }\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n\r\n  function gameEnd(gameWon: boolean) {\r\n    if (gameWon) {\r\n      setGameOver(true);\r\n      setGameWon(true);\r\n    } else {\r\n      setGameOver(true);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"Grid\">\r\n      <h1>MINESWEEPER</h1>\r\n      {squareList.map((row, index) => (\r\n        <MineRow\r\n          key={index}\r\n          row={row}\r\n          leftClick={gridLeftClickUpdate}\r\n          rightClick={gridRightClickUpdate}\r\n        />\r\n      ))}\r\n      {gameOver ? <GameOver gameWon={gameWon} /> : <div></div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MineGrid;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}