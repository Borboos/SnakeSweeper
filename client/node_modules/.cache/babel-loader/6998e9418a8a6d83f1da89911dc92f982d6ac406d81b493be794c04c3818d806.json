{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cajso\\\\Desktop\\\\Projects\\\\minesweeper\\\\src\\\\Components\\\\SnakeGrid.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport SnakeRow from \"./SnakeRow\";\nimport SnakeGameOver from \"./SnakeGameOver\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SnakeGrid() {\n  _s();\n  const [squareList, setSquareList] = useState(() => getInitGrid(16));\n  const [gamePaused, setGamePaused] = useState(true);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [headDirection, setHeadDirection] = useState(\"left\");\n  const [head, setHead] = useState({\n    xPos: 8,\n    yPos: 8\n  });\n  window.addEventListener(\"keydown\", event => {\n    switch (event.key) {\n      case \"ArrowLeft\":\n        if (headDirection !== \"right\") {\n          setHeadDirection(\"left\");\n        }\n        break;\n      case \"ArrowRight\":\n        if (headDirection !== \"left\") {\n          console.log(headDirection);\n          setHeadDirection(\"right\");\n        }\n        break;\n      case \"ArrowDown\":\n        if (headDirection !== \"up\") {\n          setHeadDirection(\"down\");\n        }\n        break;\n      case \"ArrowUp\":\n        if (headDirection !== \"down\") {\n          setHeadDirection(\"up\");\n        }\n        break;\n      case \" \":\n        setGamePaused(!gamePaused);\n        break;\n      default:\n        break;\n    }\n  });\n  useEffect(() => {\n    function updateFruit(currFruitPos) {\n      let randFruitPos = Math.floor(Math.random() * 256) + 1;\n      while (getCurrentSnake().includes(randFruitPos) || currFruitPos === randFruitPos) {\n        randFruitPos = Math.floor(Math.random() * 256) + 1;\n      }\n      let tempList = [...squareList];\n      for (let i = 0; i < tempList.length; i++) for (let j = 0; j < tempList.length; j++) {\n        if (tempList[i][j].id === randFruitPos) {\n          tempList[i][j].fruit = true;\n        }\n        if (tempList[i][j].id === currFruitPos) {\n          tempList[i][j].fruit = false;\n        }\n      }\n      setSquareList(tempList);\n    }\n    function updateSnake() {\n      const currentSnake = getCurrentSnake();\n    }\n    function getCurrentSnake() {\n      let snakeList = [];\n      for (let i = 0; i < squareList.length; i++) for (let j = 0; j < squareList.length; j++) if (squareList[i][j].head || squareList[i][j].tail) {\n        snakeList.push(squareList[i][j].id);\n      }\n      return snakeList;\n    }\n    function getCurrentHead() {\n      for (let i = 0; i < squareList.length; i++) for (let j = 0; j < squareList.length; j++) if (squareList[i][j].head) {\n        return squareList[i][j].id;\n      }\n    }\n    const interval = setInterval(() => {\n      if (!gamePaused) {\n        let tempSquareList = [...squareList];\n        for (let i = 0; i < tempSquareList.length; i++) for (let j = 0; j < tempSquareList.length; j++) if (tempSquareList[i][j].head) {\n          tempSquareList[i][j].head = false;\n          switch (headDirection) {\n            case \"left\":\n              if (i === 0) {\n                setGameOver(true);\n              } else {\n                tempSquareList[i - 1][j].head = true;\n                setSquareList(tempSquareList);\n                if (tempSquareList[i - 1][j].fruit) {\n                  setScore(score + 1);\n                  updateFruit(tempSquareList[i - 1][j].id);\n                }\n              }\n              return;\n            case \"right\":\n              if (i === squareList.length - 1) {\n                setGameOver(true);\n              } else {\n                tempSquareList[i + 1][j].head = true;\n                setSquareList(tempSquareList);\n                if (tempSquareList[i + 1][j].fruit) {\n                  setScore(score + 1);\n                  updateFruit(tempSquareList[i + 1][j].id);\n                }\n              }\n              return;\n            case \"down\":\n              if (j === squareList.length - 1) {\n                setGameOver(true);\n              } else {\n                tempSquareList[i][j + 1].head = true;\n                setSquareList(tempSquareList);\n                if (tempSquareList[i][j + 1].fruit) {\n                  setScore(score + 1);\n                  updateFruit(tempSquareList[i][j + 1].id);\n                }\n              }\n              return;\n            case \"up\":\n              if (j === 0) {\n                setGameOver(true);\n              } else {\n                tempSquareList[i][j - 1].head = true;\n                setSquareList(tempSquareList);\n                if (tempSquareList[i][j - 1].fruit) {\n                  setScore(score + 1);\n                  updateFruit(tempSquareList[i][j - 1].id);\n                }\n              }\n              return;\n            default:\n              return;\n          }\n        }\n      }\n    }, 100);\n    return () => clearInterval(interval);\n  }, [squareList, headDirection, gamePaused, score]);\n  function getInitGrid(size) {\n    let initialSquareList = [];\n    for (let i = 0; i < size; i++) {\n      let tempRow = [];\n      for (let j = 0; j < size; j++) {\n        tempRow.push({\n          id: i * size + j + 1,\n          xPos: i,\n          yPos: j,\n          head: false,\n          tail: false,\n          fruit: false\n        });\n      }\n      initialSquareList.push(tempRow);\n    }\n    initialSquareList[8][8].head = true;\n    let randFruitPos = Math.floor(Math.random() * 256) + 1;\n    while (randFruitPos === 137) randFruitPos = Math.floor(Math.random() * 256) + 1;\n    for (let i = 0; i < size; i++) for (let j = 0; j < size; j++) if (initialSquareList[i][j].id === randFruitPos) {\n      initialSquareList[i][j].fruit = true;\n    }\n    return initialSquareList;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Grid\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"SNAKE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), !gameOver && score > 0 ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"FRUITS EATEN: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 33\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 66\n    }, this), squareList.map((row, index) => /*#__PURE__*/_jsxDEV(SnakeRow, {\n      row: row\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }, this)), gameOver ? /*#__PURE__*/_jsxDEV(SnakeGameOver, {\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 19\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 53\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n}\n_s(SnakeGrid, \"RcSl3RPCBJdssHrsEPqSoKOCmjY=\");\n_c = SnakeGrid;\nexport default SnakeGrid;\nvar _c;\n$RefreshReg$(_c, \"SnakeGrid\");","map":{"version":3,"names":["React","useState","useEffect","SnakeRow","SnakeGameOver","jsxDEV","_jsxDEV","SnakeGrid","_s","squareList","setSquareList","getInitGrid","gamePaused","setGamePaused","gameOver","setGameOver","score","setScore","headDirection","setHeadDirection","head","setHead","xPos","yPos","window","addEventListener","event","key","console","log","updateFruit","currFruitPos","randFruitPos","Math","floor","random","getCurrentSnake","includes","tempList","i","length","j","id","fruit","updateSnake","currentSnake","snakeList","tail","push","getCurrentHead","interval","setInterval","tempSquareList","clearInterval","size","initialSquareList","tempRow","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","row","index","_c","$RefreshReg$"],"sources":["C:/Users/cajso/Desktop/Projects/minesweeper/src/Components/SnakeGrid.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport SnakeRow from \"./SnakeRow\";\r\nimport { SnakeSquareType } from \"../Types\";\r\nimport SnakeGameOver from \"./SnakeGameOver\";\r\n\r\nfunction SnakeGrid() {\r\n  const [squareList, setSquareList] = useState(() => getInitGrid(16));\r\n  const [gamePaused, setGamePaused] = useState(true);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [headDirection, setHeadDirection] = useState(\"left\");\r\n  const [head, setHead] = useState({ xPos: 8, yPos: 8 });\r\n\r\n  window.addEventListener(\"keydown\", (event) => {\r\n    switch (event.key) {\r\n      case \"ArrowLeft\":\r\n        if (headDirection !== \"right\") {\r\n          setHeadDirection(\"left\");\r\n        }\r\n        break;\r\n      case \"ArrowRight\":\r\n        if (headDirection !== \"left\") {\r\n          console.log(headDirection);\r\n          setHeadDirection(\"right\");\r\n        }\r\n        break;\r\n      case \"ArrowDown\":\r\n        if (headDirection !== \"up\") {\r\n          setHeadDirection(\"down\");\r\n        }\r\n        break;\r\n      case \"ArrowUp\":\r\n        if (headDirection !== \"down\") {\r\n          setHeadDirection(\"up\");\r\n        }\r\n        break;\r\n      case \" \":\r\n        setGamePaused(!gamePaused);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    function updateFruit(currFruitPos: number) {\r\n      let randFruitPos = Math.floor(Math.random() * 256) + 1;\r\n      while (\r\n        getCurrentSnake().includes(randFruitPos) ||\r\n        currFruitPos === randFruitPos\r\n      ) {\r\n        randFruitPos = Math.floor(Math.random() * 256) + 1;\r\n      }\r\n      let tempList = [...squareList];\r\n      for (let i = 0; i < tempList.length; i++)\r\n        for (let j = 0; j < tempList.length; j++) {\r\n          if (tempList[i][j].id === randFruitPos) {\r\n            tempList[i][j].fruit = true;\r\n          }\r\n          if (tempList[i][j].id === currFruitPos) {\r\n            tempList[i][j].fruit = false;\r\n          }\r\n        }\r\n      setSquareList(tempList);\r\n    }\r\n\r\n    function updateSnake() {\r\n      const currentSnake = getCurrentSnake();\r\n    }\r\n\r\n    function getCurrentSnake() {\r\n      let snakeList = [];\r\n      for (let i = 0; i < squareList.length; i++)\r\n        for (let j = 0; j < squareList.length; j++)\r\n          if (squareList[i][j].head || squareList[i][j].tail) {\r\n            snakeList.push(squareList[i][j].id);\r\n          }\r\n      return snakeList;\r\n    }\r\n\r\n    function getCurrentHead() {\r\n      for (let i = 0; i < squareList.length; i++)\r\n        for (let j = 0; j < squareList.length; j++)\r\n          if (squareList[i][j].head) {\r\n            return squareList[i][j].id;\r\n          }\r\n    }\r\n\r\n    const interval = setInterval(() => {\r\n      if (!gamePaused) {\r\n        let tempSquareList = [...squareList];\r\n        for (let i = 0; i < tempSquareList.length; i++)\r\n          for (let j = 0; j < tempSquareList.length; j++)\r\n            if (tempSquareList[i][j].head) {\r\n              tempSquareList[i][j].head = false;\r\n              switch (headDirection) {\r\n                case \"left\":\r\n                  if (i === 0) {\r\n                    setGameOver(true);\r\n                  } else {\r\n                    tempSquareList[i - 1][j].head = true;\r\n                    setSquareList(tempSquareList);\r\n                    if (tempSquareList[i - 1][j].fruit) {\r\n                      setScore(score + 1);\r\n                      updateFruit(tempSquareList[i - 1][j].id);\r\n                    }\r\n                  }\r\n                  return;\r\n                case \"right\":\r\n                  if (i === squareList.length - 1) {\r\n                    setGameOver(true);\r\n                  } else {\r\n                    tempSquareList[i + 1][j].head = true;\r\n                    setSquareList(tempSquareList);\r\n                    if (tempSquareList[i + 1][j].fruit) {\r\n                      setScore(score + 1);\r\n                      updateFruit(tempSquareList[i + 1][j].id);\r\n                    }\r\n                  }\r\n                  return;\r\n                case \"down\":\r\n                  if (j === squareList.length - 1) {\r\n                    setGameOver(true);\r\n                  } else {\r\n                    tempSquareList[i][j + 1].head = true;\r\n                    setSquareList(tempSquareList);\r\n                    if (tempSquareList[i][j + 1].fruit) {\r\n                      setScore(score + 1);\r\n                      updateFruit(tempSquareList[i][j + 1].id);\r\n                    }\r\n                  }\r\n                  return;\r\n                case \"up\":\r\n                  if (j === 0) {\r\n                    setGameOver(true);\r\n                  } else {\r\n                    tempSquareList[i][j - 1].head = true;\r\n                    setSquareList(tempSquareList);\r\n                    if (tempSquareList[i][j - 1].fruit) {\r\n                      setScore(score + 1);\r\n                      updateFruit(tempSquareList[i][j - 1].id);\r\n                    }\r\n                  }\r\n                  return;\r\n                default:\r\n                  return;\r\n              }\r\n            }\r\n      }\r\n    }, 100);\r\n    return () => clearInterval(interval);\r\n  }, [squareList, headDirection, gamePaused, score]);\r\n\r\n  function getInitGrid(size: number) {\r\n    let initialSquareList: SnakeSquareType[][] = [];\r\n    for (let i = 0; i < size; i++) {\r\n      let tempRow: SnakeSquareType[] = [];\r\n      for (let j = 0; j < size; j++) {\r\n        tempRow.push({\r\n          id: i * size + j + 1,\r\n          xPos: i,\r\n          yPos: j,\r\n          head: false,\r\n          tail: false,\r\n          fruit: false,\r\n        });\r\n      }\r\n      initialSquareList.push(tempRow);\r\n    }\r\n    initialSquareList[8][8].head = true;\r\n    let randFruitPos = Math.floor(Math.random() * 256) + 1;\r\n    while (randFruitPos === 137)\r\n      randFruitPos = Math.floor(Math.random() * 256) + 1;\r\n    for (let i = 0; i < size; i++)\r\n      for (let j = 0; j < size; j++)\r\n        if (initialSquareList[i][j].id === randFruitPos) {\r\n          initialSquareList[i][j].fruit = true;\r\n        }\r\n    return initialSquareList;\r\n  }\r\n\r\n  return (\r\n    <div className=\"Grid\">\r\n      <h1>SNAKE</h1>\r\n      {!gameOver && score > 0 ? <h2>FRUITS EATEN: {score}</h2> : <div></div>}\r\n      {squareList.map((row, index) => (\r\n        <SnakeRow key={index} row={row} />\r\n      ))}\r\n      {gameOver ? <SnakeGameOver score={score} /> : <div></div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SnakeGrid;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}